###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       22/Mar/2018  01:24:53
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_common\application\user_app1.c
#    Command line =  
#        "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_common\application\user_app1.c"
#        -D MPGL2 -D MPG2 --preprocess=cl "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\Debug\List"
#        -lC "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\Debug\List"
#        -o "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\Debug\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "E:\Software\IAR
#        Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\" -I
#        "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\..\bsp\"
#        -I "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\..\drivers\"
#        -I "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\..\application\"
#        -I "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\..\libraries\captouch\"
#        -I "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\..\..\firmware_common\"
#        -I "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\..\..\firmware_common\application\"
#        -I "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\..\..\firmware_common\cmsis\"
#        -I "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\..\..\firmware_common\drivers\"
#        -I "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\..\..\firmware_common\tetris\"
#        -On --use_c++_inline --require_prototypes -I "E:\Software\IAR
#        Systems\Embedded Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_Canada.1252
#    List file    =  
#        C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\Debug\List\user_app1.lst
#    Object file  =  
#        C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\Debug\Obj\user_app1.o
#
###############################################################################

C:\Users\Anthony\Google Drive\Hobbies\IAR\Razor_Atmel\firmware_common\application\user_app1.c
      1          /**********************************************************************************************************************
      2          File: user_app1.c                                                                
      3          
      4          ----------------------------------------------------------------------------------------------------------------------
      5          To start a new task using this user_app1 as a template:
      6           1. Copy both user_app1.c and user_app1.h to the Application directory
      7           2. Rename the files yournewtaskname.c and yournewtaskname.h
      8           3. Add yournewtaskname.c and yournewtaskname.h to the Application Include and Source groups in the IAR project
      9           4. Use ctrl-h (make sure "Match Case" is checked) to find and replace all instances of "user_app1" with "yournewtaskname"
     10           5. Use ctrl-h to find and replace all instances of "UserApp1" with "YourNewTaskName"
     11           6. Use ctrl-h to find and replace all instances of "USER_APP1" with "YOUR_NEW_TASK_NAME"
     12           7. Add a call to YourNewTaskNameInitialize() in the init section of main
     13           8. Add a call to YourNewTaskNameRunActiveState() in the Super Loop section of main
     14           9. Update yournewtaskname.h per the instructions at the top of yournewtaskname.h
     15          10. Delete this text (between the dashed lines) and update the Description below to describe your task
     16          ----------------------------------------------------------------------------------------------------------------------
     17          
     18          Description:
     19          This is a user_app1.c file template 
     20          
     21          ------------------------------------------------------------------------------------------------------------------------
     22          API:
     23          
     24          Public functions:
     25          
     26          
     27          Protected System functions:
     28          void UserApp1Initialize(void)
     29          Runs required initialzation for the task.  Should only be called once in main init section.
     30          
     31          void UserApp1RunActiveState(void)
     32          Runs current task state.  Should only be called once in main loop.
     33          
     34          
     35          **********************************************************************************************************************/
     36          
     37          #include "configuration.h"
     38          #include "lcd_bitmaps.h"
     39          #include <string.h>
     40          
     41          /***********************************************************************************************************************
     42          Global variable definitions with scope across entire project.
     43          All Global variable names shall start with "G_UserApp1"
     44          ***********************************************************************************************************************/
     45          /* New variables */

   \                                 In section .bss, align 4
     46          volatile u32 G_u32UserApp1Flags;                       /* Global state flags */
   \                     G_u32UserApp1Flags:
   \   00000000                      DS8 4
     47          
     48          
     49          /*--------------------------------------------------------------------------------------------------------------------*/
     50          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     51          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     52          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     53          
     54          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     55          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     56          
     57          
     58          /***********************************************************************************************************************
     59          Global variable definitions with scope limited to this local application.
     60          Variable names shall start with "UserApp1_" and be declared as static.
     61          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     62          static fnCode_type UserApp1_StateMachine;            /* The state machine function pointer */
                                    ^
Warning[Pe550]: variable "UserApp1_StateMachine" was set but never used
   \                     UserApp1_StateMachine:
   \   00000000                      DS8 4
     63          //static u32 UserApp1_u32Timeout;                      /* Timeout counter used across states */

   \                                 In section .bss, align 2
     64          static u16 msCounter = 0;
   \                     msCounter:
   \   00000000                      DS8 2
     65          
     66          /**********************************************************************************************************************
     67          Function Definitions
     68          **********************************************************************************************************************/
     69          
     70          /*--------------------------------------------------------------------------------------------------------------------*/
     71          /* Public functions                                                                                                   */
     72          /*--------------------------------------------------------------------------------------------------------------------*/
     73          
     74          /*--------------------------------------------------------------------------------------------------------------------*/
     75          /* Protected functions                                                                                                */
     76          /*--------------------------------------------------------------------------------------------------------------------*/
     77          
     78          /*--------------------------------------------------------------------------------------------------------------------
     79          Function: UserApp1Initialize
     80          
     81          Description:
     82          Initializes the State Machine and its variables.
     83          
     84          Requires:
     85            -
     86          
     87          Promises:
     88            - 
     89          */

   \                                 In section .text, align 2, keep-with-next
     90          void UserApp1Initialize(void)
     91          {
   \                     UserApp1Initialize: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
     92           
     93            LcdClearScreen();
   \   00000002   0x.... 0x....      BL       LcdClearScreen
     94            /* If good initialization, set state to Idle */
     95            if( 1 )
     96            {
     97              UserApp1_StateMachine = UserApp1SM_Idle;
   \   00000006   0x.... 0x....      ADR.W    R0,UserApp1SM_Idle
   \   0000000A   0x....             LDR.N    R1,??DataTable1
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     98              int i, j;
     99              memcpy(&i, &j, 0);
   \   0000000E   0x2400             MOVS     R4,#+0
   \   00000010   0x466D             MOV      R5,SP
   \   00000012   0xAE01             ADD      R6,SP,#+4
   \   00000014   0x0022             MOVS     R2,R4
   \   00000016   0x0029             MOVS     R1,R5
   \   00000018   0x0030             MOVS     R0,R6
   \   0000001A   0x.... 0x....      BL       __aeabi_memcpy
    100            }
    101            else
    102            {
    103              /* The task isn't properly initialized, so shut it down and don't run */
    104              UserApp1_StateMachine = UserApp1SM_Error;
    105            }
    106          
    107          } /* end UserApp1Initialize() */
   \   0000001E   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    108          
    109            
    110          /*----------------------------------------------------------------------------------------------------------------------
    111          Function UserApp1RunActiveState()
    112          
    113          Description:
    114          Selects and runs one iteration of the current state in the state machine.
    115          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    116          may take 1ms / n to execute.
    117          
    118          Requires:
    119            - State machine function pointer points at current state
    120          
    121          Promises:
    122            - Calls the function to pointed by the state machine function pointer
    123          */

   \                                 In section .text, align 2, keep-with-next
    124          void UserApp1RunActiveState(void)
    125          {
    126          
    127            msCounter++;
   \                     UserApp1RunActiveState: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable1_1
   \   00000002   0x8800             LDRH     R0,[R0, #+0]
   \   00000004   0x1C40             ADDS     R0,R0,#+1
   \   00000006   0x....             LDR.N    R1,??DataTable1_1
   \   00000008   0x8008             STRH     R0,[R1, #+0]
    128            /*
    129            //UserApp1_StateMachine();
    130            msCounter++;
    131            char intString[10];
    132            
    133            int i, temp;
    134            temp = msCounter;
    135            intString[9] = '\0';
    136            for(i = 8; i>=0; i--)
    137            {
    138              intString[i] = (char)(temp%10)+0x30;
    139              temp/=10;
    140            }
    141            
    142            PixelAddressType type;
    143            type.u16PixelColumnAddress = 0;
    144            type.u16PixelRowAddress = 0;
    145          
    146            LcdLoadString(intString, LCD_FONT_SMALL, &type);
    147            */
    148            
    149          /*
    150            extern u8 aau8IdleRight[12][12];
    151            extern u8 aau8RunningRight1[12][12];
    152            extern u8 aau8RunningRight2[12][12];
    153            extern u8 aau8RunningRight3[12][12];
    154            extern u8 aau8JumpRight[12][12];
    155            
    156            extern u8 aau8IdleLeft[12][12];
    157            extern u8 aau8RunningLeft1[12][12];
    158            extern u8 aau8RunningLeft2[12][12];
    159            extern u8 aau8RunningLeft3[12][12];
    160            extern u8 aau8JumpLeft[12][12];
    161            
    162            PixelBlockType mario;
    163            mario.u16RowSize = 12;
    164            mario.u16ColumnSize = 12;
    165            mario.u16ColumnStart = 0;
    166            mario.u16RowStart = 0;
    167            
    168            if(msCounter == 333)
    169              LcdLoadBitmap(&aau8RunningRight3[0][0], &mario);
    170            else if(msCounter == 666)
    171              LcdLoadBitmap(&aau8RunningRight2[0][0], &mario);
    172            else if(msCounter == 999)
    173              LcdLoadBitmap(&aau8RunningRight1[0][0], &mario);
    174          
    175            if(msCounter > 1000)
    176              msCounter = 0;
    177          */
    178          
    179          } /* end UserApp1RunActiveState */
   \   0000000A   0x4770             BX       LR               ;; return
    180          
    181          
    182          /*--------------------------------------------------------------------------------------------------------------------*/
    183          /* Private functions                                                                                                  */
    184          /*--------------------------------------------------------------------------------------------------------------------*/
    185          
    186          
    187          /**********************************************************************************************************************
    188          State Machine Function Definitions
    189          **********************************************************************************************************************/
    190          
    191          /*-------------------------------------------------------------------------------------------------------------------*/
    192          /* Wait for ??? */

   \                                 In section .text, align 4, keep-with-next
    193          static void UserApp1SM_Idle(void)
    194          {
    195          
    196          } /* end UserApp1SM_Idle() */
   \                     UserApp1SM_Idle: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     UserApp1_StateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     msCounter
    197              
    198          
    199          /*-------------------------------------------------------------------------------------------------------------------*/
    200          /* Handle an error */
    201          static void UserApp1SM_Error(void)          
    202          {
    203            
    204          } /* end UserApp1SM_Error() */
    205          
    206          
    207          
    208          /*--------------------------------------------------------------------------------------------------------------------*/
    209          /* End of File                                                                                                        */
    210          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   UserApp1Initialize
        24   -> LcdClearScreen
        24   -> __aeabi_memcpy
       0   UserApp1RunActiveState
       0   UserApp1SM_Idle


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  G_u32UserApp1Flags
      32  UserApp1Initialize
      12  UserApp1RunActiveState
       2  UserApp1SM_Idle
       4  UserApp1_StateMachine
       2  msCounter

 
 10 bytes in section .bss
 54 bytes in section .text
 
 54 bytes of CODE memory
 10 bytes of DATA memory

Errors: none
Warnings: 1
