###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       22/Mar/2018  01:24:51
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\drivers\lcd_NHD-C12864LZ.c
#    Command line =  
#        "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\drivers\lcd_NHD-C12864LZ.c"
#        -D MPGL2 -D MPG2 --preprocess=cl "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\Debug\List"
#        -lC "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\Debug\List"
#        -o "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\Debug\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "E:\Software\IAR
#        Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\" -I
#        "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\..\bsp\"
#        -I "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\..\drivers\"
#        -I "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\..\application\"
#        -I "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\..\libraries\captouch\"
#        -I "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\..\..\firmware_common\"
#        -I "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\..\..\firmware_common\application\"
#        -I "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\..\..\firmware_common\cmsis\"
#        -I "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\..\..\firmware_common\drivers\"
#        -I "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\..\..\firmware_common\tetris\"
#        -On --use_c++_inline --require_prototypes -I "E:\Software\IAR
#        Systems\Embedded Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_Canada.1252
#    List file    =  
#        C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\Debug\List\lcd_NHD-C12864LZ.lst
#    Object file  =  
#        C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\iar_7_20_1\Debug\Obj\lcd_NHD-C12864LZ.o
#
###############################################################################

C:\Users\Anthony\Google Drive\Hobbies\IAR\Razor_Atmel\firmware_dotmatrix\drivers\lcd_NHD-C12864LZ.c
      1          /***********************************************************************************************************************
      2          File: lcd_NHD-C12864LZ.c      
      3          
      4          Description:
      5          LCD implementation for Newhaven NHD-C12864LZ.  This file contains the task definition
      6          for the LCD handler.  The LCD is automatically refreshed every LCD_REFRESH_TIME milliseconds.
      7          Only changed pixel data is sent with each refresh to minimize processor time.
      8          A copy of the LCD memory is maintained in RAM as 2D array where each bit corresponds to one pixel.  
      9          Any application may write to the LCD using the API, though this only impacts the local RAM.  All application addressing of
     10          the LCD is managed in pixels -- mapping pixel addresses in RAM to the LCD is fully managed
     11          by this driver.
     12          
     13          The physical pixel addresses (row, column) on the LCD are shown here:
     14          
     15          |--------------------------------------------------------------------------------------|
     16          |################################### BLACK EPOXY ######################################|
     17          |--------------------------------------------------------------------------------------|
     18          |0,127                                                                              0,0|
     19          |                                                                                      |
     20          |                                                                                      |
     21          |                                                                                      |
     22          |                                                                                      |
     23          |                                                                                      |
     24          |                                                                                      |
     25          |                                                                                      |
     26          |63,127                                                                            63,0|
     27          ---------------------------------------------------------------------------------------|
     28          
     29          The LCD RAM maps out logically as shown here:
     30          |--------------------------------------------------------------------------------------|
     31          |###################################     TOP     ######################################|
     32          |--------------------------------------------------------------------------------------|
     33          |[0] [0]   First pixel and Text Line 0 start pixel                             [0][127]|
     34          |[8] [0]   Text Line 1 start pixel                                                     |
     35          |[16][0]   Text Line 2 start pixel                                                     |
     36          |[24][0]   Text Line 3 start pixel                                                     |
     37          |[32][0]   Text Line 4 start pixel                                                     |
     38          |[40][0]   Text Line 5 start pixel                                                     |
     39          |[48][0]   Text Line 6 start pixel                                                     |
     40          |[56][0]   Text Line 7 start pixel                                                     |
     41          |[63][0]                                                                      [63][127]|
     42          ---------------------------------------------------------------------------------------|
     43          
     44          Task details:
     45          1. The LCD requires access to the SPI resource that is connected to the LCD
     46          2. Local LCD RAM may be written by any task at any time
     47          3. LCD RAM is sent to update the LCD screen every LCD_REFRESH_TIME ms
     48          
     49          ------------------------------------------------------------------------------------------------------------------------
     50          API:
     51          LcdFontType {LCD_FONT_SMALL, LCD_FONT_BIG}
     52          LcdShiftType {LCD_SHIFT_UP, LCD_SHIFT_DOWN, LCD_SHIFT_RIGHT, LCD_SHIFT_LEFT}
     53          PixelAddressType
     54          {
     55            u16 u16PixelRowAddress;
     56            u16 u16PixelColumnAddress;
     57          }
     58          
     59          PixelBlockType
     60          {
     61            u16 u16RowStart;             Address of top left pixel row
     62            u16 u16ColumnStart;          Address of top left pixel column
     63            u16 u16RowSize;              Number of rows in block
     64            u16 u16ColumnSize;           Number of columns in block
     65          }
     66          
     67          void LcdSetPixel(PixelAddressType* sPixelAddress_)
     68          Turn on one pixel in the LCD RAM.  
     69          - sPixelAddress_ is the address of the pixel to set
     70          e.g. Turn on a pixel in the center of the screen:
     71          PixelAddressType sTargetPixel = {32, 64};
     72          LcdSetPixel(&sTargetPixel);
     73          
     74          void LcdClearPixel(PixelAddressType* sPixelAddress_)
     75          Turn off one pixel in the LCD RAM.  
     76          - sPixelAddress_ is the address of the pixel to clear
     77          e.g. Turn off a pixel in the center of the screen:
     78          PixelAddressType sTargetPixel = {32, 64};
     79          LcdClearPixel(&sTargetPixel);
     80          
     81          void LcdClearPixels(PixelBlockType* sPixelsToClear_)
     82          Clears the selected block of pixels.  A custom area can be provided to this function,
     83          but several commonly used predefined areas are included.
     84          (G_sLcdClearWholeScreen, G_sLcdClearLine0, ..., G_sLcdClearLine7)
     85          - sPixelsToClear_: block definition of pixel area to clear
     86          e.g. Clear a 25 x 30 block of pixels in the top-right corner of the LCD:
     87          PixelBlockType sPixelsToClear;
     88          
     89          sPixelsToClear.u16RowStart = 0;
     90          sPixelsToClear.u16ColumnStart = 0;
     91          sPixelsToClear.u16RowSize = 25;
     92          sPixelsToClear.u16ColumnSize = 30;
     93          LcdClearPixels(sPixelsToClear);
     94          
     95          void LcdClearScreen(void)
     96          Clears all of the current pixel data.
     97          e.g. LcdClearScreen();
     98          
     99          void LcdLoadString(const unsigned char* pu8String_, LcdFontType eFont_, PixelAddressType* sStartPixel_);
    100          Updates the local LCD memory with an ASCII string in the font specified.  Any pixels that 
    101          will not fit on the LCD are ignored (but this will allow for partial characters to be drawn).
    102          - pu8String_: pointer to C-string to be printed
    103          - eFont_: font of choice
    104          - sStartPixel_: location where the top left pixel of the first character bitmap square is specifed
    105          e.g. Load a string on the bottom text line left justified.
    106          PixelAddressType sTestStringLocation = {LCD_SMALL_FONT_LINE7, LCD_LEFT_MOST_COLUMN}; 
    107          u8 au8TestString[] = "Testing";
    108          LcdLoadString(au8TestString, LCD_FONT_SMALL, &sTestStringLocation); 
    109          
    110          void LcdLoadBitmap(u8* aau8Bitmap_, PixelBlockType* sBitmapSize_)
    111          Places a bitmap into the LCD RAM.  
    112          - pu8Bitmap_ points to the start of a bitmap image array.
    113          - sBitmapSize_ the starting pixel location (top left of the image)
    114          e.g. Load logo in the top left corner of the screen
    115          PixelBlockType sEngenuicsImage;
    116          
    117          sEngenuicsImage.u16RowStart = 0;
    118          sEngenuicsImage.u16ColumnStart = 0;
    119          sEngenuicsImage.u16RowSize = 50;
    120          sEngenuicsImage.u16ColumnSize = 50;
    121          LcdLoadBitmap(&aau8EngenuicsLogoBlack[0][0], sEngenuicsImage);
    122          
    123          bool LcdCommand(u8 u8Command_)
    124          Sends a control command to the LCD.  
    125          - u8Command_: LCD_DISPLAY_ON, LCD_DISPLAY_OFF, LCD_PIXEL_TEST_ON, LCD_PIXEL_TEST_OFF
    126          e.g. LcdCommand(PIXEL_TEST_ON);
    127          
    128          
    129          NOT YET IMPLEMENTED:
    130          LcdShift(PixelBlockType eShiftArea_, u16 u16PixelsToShift_, LcdShiftType eDirection_):
    131          Shifts a block of pixels by the specified number of pixels.  Any data shifted off of the 
    132          edge of the specified shift area are lost.
    133          - eShiftArea_: the block of pixels to shift
    134          - u16PixelsToShift_: the number of pixels to shift the block
    135          - eDirection_: the direction of shift [LCD_SHIFT_UP, LCD_SHIFT_DOWN, LCD_SHIFT_RIGHT, LCD_SHIFT_LEFT]
    136          
    137          Macros:
    138          LCD_BACKLIGHT_ON()
    139          LCD_BACKLIGHT_OFF()
    140          
    141          ***********************************************************************************************************************/
    142          
    143          #include "configuration.h"
    144          #include "lcd_bitmaps.h"
    145          
    146          /***********************************************************************************************************************
    147          * Bookmarks
    148          ************************************************************************************************************************
    149          !!!!! LCD Driver Functions
    150          @@@@@ LCD State Machine Functions
    151          ***********************************************************************************************************************/
    152          
    153          
    154          /***********************************************************************************************************************
    155          Global variable definitions with scope across entire project.
    156          All Global variable names shall start with "G_xxLcd"
    157          ***********************************************************************************************************************/
    158          /*--------------------------------------------------------------------------------------------------------------------*/
    159          /* New variables */

   \                                 In section .bss, align 4
    160          u8 G_aau8LcdRamImage[LCD_IMAGE_ROWS][LCD_IMAGE_COLUMNS];    /* A complete copy of the LCD image in RAM */
   \                     G_aau8LcdRamImage:
   \   00000000                      DS8 1024
    161          

   \                                 In section .data, align 4
    162          PixelBlockType G_sLcdClearWholeScreen = 
   \                     G_sLcdClearWholeScreen:
   \   00000000   0x0000 0x0000      DC16 0, 0, 64, 128
   \              0x0040 0x0080
    163          {
    164            .u16RowStart = 0,
    165            .u16ColumnStart = 0,
    166            .u16RowSize = LCD_ROWS,
    167            .u16ColumnSize = LCD_COLUMNS
    168          };
    169          

   \                                 In section .data, align 4
    170          PixelBlockType G_sLcdClearLine0 = 
   \                     G_sLcdClearLine0:
   \   00000000   0x0000 0x0000      DC16 0, 0, 7, 128
   \              0x0007 0x0080
    171          {
    172            .u16RowStart = LCD_SMALL_FONT_LINE0,
    173            .u16ColumnStart = 0,
    174            .u16RowSize = LCD_SMALL_FONT_ROWS,
    175            .u16ColumnSize = LCD_COLUMNS
    176          };
    177          

   \                                 In section .data, align 4
    178          PixelBlockType G_sLcdClearLine1 = 
   \                     G_sLcdClearLine1:
   \   00000000   0x0008 0x0000      DC16 8, 0, 7, 128
   \              0x0007 0x0080
    179          {
    180            .u16RowStart = LCD_SMALL_FONT_LINE1,
    181            .u16ColumnStart = 0,
    182            .u16RowSize = LCD_SMALL_FONT_ROWS,
    183            .u16ColumnSize = LCD_COLUMNS
    184          };
    185          

   \                                 In section .data, align 4
    186          PixelBlockType G_sLcdClearLine2 = 
   \                     G_sLcdClearLine2:
   \   00000000   0x0010 0x0000      DC16 16, 0, 7, 128
   \              0x0007 0x0080
    187          {
    188            .u16RowStart = LCD_SMALL_FONT_LINE2,
    189            .u16ColumnStart = 0,
    190            .u16RowSize = LCD_SMALL_FONT_ROWS,
    191            .u16ColumnSize = LCD_COLUMNS
    192          };
    193          

   \                                 In section .data, align 4
    194          PixelBlockType G_sLcdClearLine3 = 
   \                     G_sLcdClearLine3:
   \   00000000   0x0018 0x0000      DC16 24, 0, 7, 128
   \              0x0007 0x0080
    195          {
    196            .u16RowStart = LCD_SMALL_FONT_LINE3,
    197            .u16ColumnStart = 0,
    198            .u16RowSize = LCD_SMALL_FONT_ROWS,
    199            .u16ColumnSize = LCD_COLUMNS
    200          };
    201          

   \                                 In section .data, align 4
    202          PixelBlockType G_sLcdClearLine4 = 
   \                     G_sLcdClearLine4:
   \   00000000   0x0020 0x0000      DC16 32, 0, 7, 128
   \              0x0007 0x0080
    203          {
    204            .u16RowStart = LCD_SMALL_FONT_LINE4,
    205            .u16ColumnStart = 0,
    206            .u16RowSize = LCD_SMALL_FONT_ROWS,
    207            .u16ColumnSize = LCD_COLUMNS
    208          };
    209          

   \                                 In section .data, align 4
    210          PixelBlockType G_sLcdClearLine5 = 
   \                     G_sLcdClearLine5:
   \   00000000   0x0028 0x0000      DC16 40, 0, 7, 128
   \              0x0007 0x0080
    211          {
    212            .u16RowStart = LCD_SMALL_FONT_LINE5,
    213            .u16ColumnStart = 0,
    214            .u16RowSize = LCD_SMALL_FONT_ROWS,
    215            .u16ColumnSize = LCD_COLUMNS
    216          };
    217          

   \                                 In section .data, align 4
    218          PixelBlockType G_sLcdClearLine6 = 
   \                     G_sLcdClearLine6:
   \   00000000   0x0030 0x0000      DC16 48, 0, 7, 128
   \              0x0007 0x0080
    219          {
    220            .u16RowStart = LCD_SMALL_FONT_LINE6,
    221            .u16ColumnStart = 0,
    222            .u16RowSize = LCD_SMALL_FONT_ROWS,
    223            .u16ColumnSize = LCD_COLUMNS
    224          };
    225          

   \                                 In section .data, align 4
    226          PixelBlockType G_sLcdClearLine7 = 
   \                     G_sLcdClearLine7:
   \   00000000   0x0038 0x0000      DC16 56, 0, 7, 128
   \              0x0007 0x0080
    227          {
    228            .u16RowStart = LCD_SMALL_FONT_LINE7,
    229            .u16ColumnStart = 0,
    230            .u16RowSize = LCD_SMALL_FONT_ROWS,
    231            .u16ColumnSize = LCD_COLUMNS
    232          };
    233          
    234          /*--------------------------------------------------------------------------------------------------------------------*/
    235          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
    236          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
    237          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
    238          
    239          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
    240          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
    241          
    242          extern const u8 G_aau8SmallFonts[][LCD_SMALL_FONT_ROWS][LCD_SMALL_FONT_COLUMN_BYTES];        /* From lcd_bitmaps.c */
    243          extern const u8 G_aau8BigFonts[][LCD_BIG_FONT_ROWS][LCD_BIG_FONT_COLUMN_BYTES];              /* From lcd_bitmaps.c */
    244          extern const u8 aau8EngenuicsLogoBlack[LCD_IMAGE_ROW_SIZE_50PX][LCD_IMAGE_COL_BYTES_50PX];   /* From lcd_bitmaps.c */
    245          extern const u8 aau8EngenuicsLogoBlackQ1[LCD_IMAGE_ROW_SIZE_25PX][LCD_IMAGE_COL_BYTES_25PX]; /* From lcd_bitmaps.c */
    246          extern const u8 aau8EngenuicsLogoBlackQ2[LCD_IMAGE_ROW_SIZE_25PX][LCD_IMAGE_COL_BYTES_25PX]; /* From lcd_bitmaps.c */
    247          extern const u8 aau8EngenuicsLogoBlackQ3[LCD_IMAGE_ROW_SIZE_25PX][LCD_IMAGE_COL_BYTES_25PX]; /* From lcd_bitmaps.c */
    248          extern const u8 aau8EngenuicsLogoBlackQ4[LCD_IMAGE_ROW_SIZE_25PX][LCD_IMAGE_COL_BYTES_25PX]; /* From lcd_bitmaps.c */
    249          
    250          extern volatile fnCode_type G_SspStateMachine;         /* From sam3u_ssp.c */
    251          
    252          
    253          /***********************************************************************************************************************
    254          Global variable definitions with scope limited to this task.
    255          Variable names shall start with "Lcd_<type>" and be declared as static.
    256          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
    257          static fnCode_type Lcd_pfnStateMachine;                           /* The application state machine */
   \                     Lcd_pfnStateMachine:
   \   00000000                      DS8 4
    258          

   \                                 In section .bss, align 4
    259          static u32 Lcd_u32Flags;                                          /* LCD flag register */
   \                     Lcd_u32Flags:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    260          static u32 Lcd_u32Timer;                                          /* Local timer with scope across file */
   \                     Lcd_u32Timer:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    261          static u32 Lcd_u32RefreshTimer;                                   /* LCD refresh timer */
   \                     Lcd_u32RefreshTimer:
   \   00000000                      DS8 4
    262          

   \                                 In section .bss, align 4
    263          fnCode_type Lcd_ReturnState;                                      /* Saved return state */
   \                     Lcd_ReturnState:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    264          static u32 Lcd_u32CurrentMsgToken;                                /* Token of message currently being sent to LCD */
   \                     Lcd_u32CurrentMsgToken:
   \   00000000                      DS8 4
    265          

   \                                 In section .bss, align 4
    266          static SspConfigurationType Lcd_sSspConfig;                       /* Configuration information for SSP peripheral */
   \                     Lcd_sSspConfig:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
    267          static SspPeripheralType* Lcd_Ssp;                                /* Pointer to LCD's SSP peripheral object */
   \                     Lcd_Ssp:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
    268          static u8 Lcd_u8PagesToUpdate;                                    /* Counter for number of pages in current LCD refresh */
   \                     Lcd_u8PagesToUpdate:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    269          static u8 Lcd_u8CurrentPage;                                      /* Current page being updated */
   \                     Lcd_u8CurrentPage:
   \   00000000                      DS8 1
    270          

   \                                 In section .bss, align 4
    271          static u8 Lcd_au8TxBuffer[LCD_TX_BUFFER_SIZE];                    /* Buffer for outgoing data to LCD during the current refresh cycle */
   \                     Lcd_au8TxBuffer:
   \   00000000                      DS8 128

   \                                 In section .bss, align 1
    272          static u8 Lcd_au8RxDummyBuffer[LCD_RX_BUFFER_SIZE];               /* Dummy location for LCD receive buffer (LCD does not send data) */
   \                     Lcd_au8RxDummyBuffer:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
    273          static u8* Lcd_pu8RxDummyBuffer;                                  /* Dummy buffer pointer */
   \                     Lcd_pu8RxDummyBuffer:
   \   00000000                      DS8 4
    274          

   \                                 In section .bss, align 4
    275          static PixelBlockType Lcd_sUpdateArea;                            /* Area of LCD to update */
   \                     Lcd_sUpdateArea:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
    276          static PixelBlockType Lcd_sCurrentUpdateArea;                     /* Area of LCD currently being updated */
   \                     Lcd_sCurrentUpdateArea:
   \   00000000                      DS8 8
    277          

   \                                 In section .data, align 4
    278          static u8 Lcd_au8MessageInit[]  = "LCD Ready\r\n";
   \                     Lcd_au8MessageInit:
   \   00000000   0x4C 0x43          DC8 "LCD Ready\015\012"
   \              0x44 0x20    
   \              0x52 0x65    
   \              0x61 0x64    
   \              0x79 0x0D    
   \              0x0A 0x00    

   \                                 In section .data, align 4
    279          static u8 Lcd_au8MessageWelcome[] = "SAM3U2 DOT MATRIX";
   \                     Lcd_au8MessageWelcome:
   \   00000000   0x53 0x41          DC8 "SAM3U2 DOT MATRIX"
   \              0x4D 0x33    
   \              0x55 0x32    
   \              0x20 0x44    
   \              0x4F 0x54    
   \              0x20 0x4D    
   \              0x41 0x54    
   \              0x52 0x49    
   \              0x58 0x00    
   \   00000012   0x00 0x00          DC8 0, 0
    280                                           

   \                                 In section .data, align 4
    281          static  u8 Lcd_au8SetupArray[] = {LCD_BIAS_LOW, LCD_ADC_SELECT_NORMAL, LCD_COMMON_MODE1, LCD_COMMON_MODE0, LCD_DISPLAY_LINE_SETx,
   \                     Lcd_au8SetupArray:
   \   00000000   0xA2 0xA0          DC8 162, 160, 200, 192, 64, 37, 129, 25, 47, 175, 165, 0
   \              0xC8 0xC0    
   \              0x40 0x25    
   \              0x81 0x19    
   \              0x2F 0xAF    
   \              0xA5 0x00    
    282                                            LCD_VOLTAGTE_REG_SETx | SET_BIT0 | SET_BIT2,
    283                                            LCD_EVOLUME_UNLOCK_, LCD_EVOLUME_LEVEL,
    284                                            LCD_POWER_CONTROLLER_SETx | BOOST_ON | VREG_ON | VFOLLOW_ON,
    285                                            LCD_DISPLAY_ON, LCD_PIXEL_TEST_ON
    286                                           }; 
    287          
    288          
    289          /***********************************************************************************************************************
    290          * LCD Driver Functions                                                     !!!!!
    291          ***********************************************************************************************************************/
    292          
    293          /*--------------------------------------------------------------------------------------------------------------------*/
    294          /* Public Functions */
    295          /*--------------------------------------------------------------------------------------------------------------------*/
    296          
    297          /*----------------------------------------------------------------------------------------------------------------------
    298          Function: LcdLoadString
    299          
    300          Description:
    301          Loads a character string into the LCD RAM location specified.
    302          
    303          Requires:
    304           - pu8String_ points to a null-terminated C-string
    305           - eFont_ selects the font to use to print the string
    306           - sStartPixel_ is the pixel location for the top left pixel of the first character bitmap (assuming a rectangular bitmap area)
    307              
    308          Promises:
    309           - The string is parsed and the bitmap for each character is loaded into the 
    310             local LCD RAM G_aau8LcdRamImage.  Any characters that will not fit on the screen are ignored.
    311             
    312          */

   \                                 In section .text, align 2, keep-with-next
    313          void LcdLoadString(const unsigned char* pu8String_, LcdFontType eFont_, PixelAddressType* sStartPixel_) 
    314          {
   \                     LcdLoadString: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    315            u8 u8FontWidth;
    316            PixelBlockType sLetterPosition;
    317            
    318            /* Initialize sLetterPosition struct based on font */
    319            sLetterPosition.u16RowStart = sStartPixel_->u16PixelRowAddress;
   \   0000000A   0x8830             LDRH     R0,[R6, #+0]
   \   0000000C   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    320            sLetterPosition.u16ColumnStart = sStartPixel_->u16PixelColumnAddress;
   \   00000010   0x8870             LDRH     R0,[R6, #+2]
   \   00000012   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    321          
    322            if(eFont_ == LCD_FONT_SMALL)
   \   00000016   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000018   0x2D00             CMP      R5,#+0
   \   0000001A   0xD108             BNE.N    ??LcdLoadString_0
    323            {
    324              u8FontWidth = LCD_SMALL_FONT_COLUMNS + LCD_SMALL_FONT_SPACE;
   \   0000001C   0x2006             MOVS     R0,#+6
   \   0000001E   0x0007             MOVS     R7,R0
    325              sLetterPosition.u16RowSize = LCD_SMALL_FONT_ROWS;
   \   00000020   0x2007             MOVS     R0,#+7
   \   00000022   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    326              sLetterPosition.u16ColumnSize = LCD_SMALL_FONT_COLUMNS;
   \   00000026   0x2005             MOVS     R0,#+5
   \   00000028   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   \   0000002C   0xE007             B.N      ??LcdLoadString_1
    327            }
    328            else
    329            {
    330              u8FontWidth = LCD_BIG_FONT_COLUMNS + LCD_BIG_FONT_SPACE;
   \                     ??LcdLoadString_0: (+1)
   \   0000002E   0x200B             MOVS     R0,#+11
   \   00000030   0x0007             MOVS     R7,R0
    331              sLetterPosition.u16RowSize = LCD_BIG_FONT_ROWS;
   \   00000032   0x200E             MOVS     R0,#+14
   \   00000034   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    332              sLetterPosition.u16ColumnSize = LCD_BIG_FONT_COLUMNS;
   \   00000038   0x200A             MOVS     R0,#+10
   \   0000003A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    333            }
    334          
    335            /* Process characters until NULL is reached */
    336            while(*pu8String_ != '\0')
   \                     ??LcdLoadString_1: (+1)
   \   0000003E   0x7820             LDRB     R0,[R4, #+0]
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD024             BEQ.N    ??LcdLoadString_2
    337            {
    338              /* Check to see if the starting address of the next character is outside the LCD area */
    339              if(sLetterPosition.u16ColumnStart >= LCD_COLUMNS)
   \   00000044   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000048   0x2880             CMP      R0,#+128
   \   0000004A   0xDA20             BGE.N    ??LcdLoadString_2
    340              {
    341                break;
    342              }
    343          
    344              /* Load each character bitmap */
    345             if(eFont_ == LCD_FONT_SMALL)
   \                     ??LcdLoadString_3: (+1)
   \   0000004C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004E   0x2D00             CMP      R5,#+0
   \   00000050   0xD10A             BNE.N    ??LcdLoadString_4
    346             {
    347               LcdLoadBitmap(&G_aau8SmallFonts[*pu8String_ - 32][0][0], &sLetterPosition);
   \   00000052   0x4669             MOV      R1,SP
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000058   0x7822             LDRB     R2,[R4, #+0]
   \   0000005A   0x2307             MOVS     R3,#+7
   \   0000005C   0x435A             MULS     R2,R3,R2
   \   0000005E   0x4410             ADD      R0,R0,R2
   \   00000060   0x38E0             SUBS     R0,R0,#+224
   \   00000062   0x.... 0x....      BL       LcdLoadBitmap
   \   00000066   0xE00A             B.N      ??LcdLoadString_5
    348             }
    349             else
    350             {
    351               LcdLoadBitmap(&G_aau8BigFonts[*pu8String_ - NUMBER_ASCII_TO_DEC][0][0], &sLetterPosition);
   \                     ??LcdLoadString_4: (+1)
   \   00000068   0x4669             MOV      R1,SP
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable14_1
   \   0000006E   0x7822             LDRB     R2,[R4, #+0]
   \   00000070   0x231C             MOVS     R3,#+28
   \   00000072   0x435A             MULS     R2,R3,R2
   \   00000074   0x4410             ADD      R0,R0,R2
   \   00000076   0xF5B0 0x60A8      SUBS     R0,R0,#+1344
   \   0000007A   0x.... 0x....      BL       LcdLoadBitmap
    352             }
    353              
    354              /* Update for the next character */
    355              sLetterPosition.u16ColumnStart += u8FontWidth;
   \                     ??LcdLoadString_5: (+1)
   \   0000007E   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000082   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000084   0x1838             ADDS     R0,R7,R0
   \   00000086   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    356              pu8String_++;
   \   0000008A   0x1C64             ADDS     R4,R4,#+1
   \   0000008C   0xE7D7             B.N      ??LcdLoadString_1
    357            }
    358            
    359          } /* end LcdLoadString */
   \                     ??LcdLoadString_2: (+1)
   \   0000008E   0xBDF7             POP      {R0-R2,R4-R7,PC}  ;; return
    360          
    361          
    362          /*----------------------------------------------------------------------------------------------------------------------
    363          Function: LcdSetPixel
    364          
    365          Description:
    366          Turn on one pixel in the LCD RAM.
    367          
    368          Requires:
    369           - G_aau8LcdRamImage is a row x column matrix of 1-bit pixel values
    370           - The origin (0,0 pixel of the LCD RAM image) is at G_aau8LcdRamImage[0][0] bit 0
    371           - sPixelAddress_ points to the address of the pixel to be set
    372          
    373          
    374          Promises:
    375           - G_aau8LcdRamImage[sPixelAddress_.u16PixelRowAddress][<bit>sPixelAddress_.u16PixelColumnAddress] is set to 1
    376          */

   \                                 In section .text, align 2, keep-with-next
    377          void LcdSetPixel(PixelAddressType* sPixelAddress_)
    378          {
   \                     LcdSetPixel: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
    379            u8 u8ColumBitPosition = 0x01;
   \   00000002   0x2101             MOVS     R1,#+1
    380            u8 u8ColumnGroup = sPixelAddress_->u16PixelColumnAddress / 8; 
   \   00000004   0x8842             LDRH     R2,[R0, #+2]
   \   00000006   0x2308             MOVS     R3,#+8
   \   00000008   0xFB92 0xF2F3      SDIV     R2,R2,R3
    381            
    382            u8ColumBitPosition = u8ColumBitPosition << (sPixelAddress_->u16PixelColumnAddress % 8); 
   \   0000000C   0x8843             LDRH     R3,[R0, #+2]
   \   0000000E   0x2408             MOVS     R4,#+8
   \   00000010   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000012   0xFB93 0xF5F4      SDIV     R5,R3,R4
   \   00000016   0xFB04 0x3315      MLS      R3,R4,R5,R3
   \   0000001A   0x4099             LSLS     R1,R1,R3
    383          
    384            /* Set the correct bit in RAM */
    385            G_aau8LcdRamImage[sPixelAddress_->u16PixelRowAddress][u8ColumnGroup] |= u8ColumBitPosition;
   \   0000001C   0x.... 0x....      LDR.W    R3,??DataTable14_2
   \   00000020   0x8804             LDRH     R4,[R0, #+0]
   \   00000022   0x0124             LSLS     R4,R4,#+4
   \   00000024   0x4423             ADD      R3,R3,R4
   \   00000026   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000028   0x.... 0x....      LDR.W    R4,??DataTable14_2
   \   0000002C   0x8805             LDRH     R5,[R0, #+0]
   \   0000002E   0x012D             LSLS     R5,R5,#+4
   \   00000030   0x442C             ADD      R4,R4,R5
   \   00000032   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000034   0x5CA4             LDRB     R4,[R4, R2]
   \   00000036   0x430C             ORRS     R4,R1,R4
   \   00000038   0x549C             STRB     R4,[R3, R2]
    386            
    387          } /* end LcdSetPixel */
   \   0000003A   0xBC30             POP      {R4,R5}
   \   0000003C   0x4770             BX       LR               ;; return
    388          
    389          
    390          /*----------------------------------------------------------------------------------------------------------------------
    391          Function: LcdClearPixel
    392          
    393          Description:
    394          Turn off one pixel in the LCD RAM.
    395          
    396          Requires:
    397           - G_aau8LcdRamImage is a row x column matrix of 1-bit pixel values
    398           - The origin (0,0 pixel of the LCD RAM image) is at G_aau8LcdRamImage[0][0] bit 0
    399           - sPixelAddress_ points to the address of the pixel to be set
    400          
    401          
    402          Promises:
    403           - G_aau8LcdRamImage[sPixelAddress_.u16PixelRowAddress][<bit>sPixelAddress_.u16PixelColumnAddress] is cleared
    404          */

   \                                 In section .text, align 2, keep-with-next
    405          void LcdClearPixel(PixelAddressType* sPixelAddress_)
    406          {
   \                     LcdClearPixel: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
    407            u8 u8ColumBitPosition = 0x01;
   \   00000002   0x2101             MOVS     R1,#+1
    408            u8 u8ColumnGroup = sPixelAddress_->u16PixelColumnAddress / 8; 
   \   00000004   0x8842             LDRH     R2,[R0, #+2]
   \   00000006   0x2308             MOVS     R3,#+8
   \   00000008   0xFB92 0xF2F3      SDIV     R2,R2,R3
    409            
    410            u8ColumBitPosition = u8ColumBitPosition << (sPixelAddress_->u16PixelColumnAddress % 8); 
   \   0000000C   0x8843             LDRH     R3,[R0, #+2]
   \   0000000E   0x2408             MOVS     R4,#+8
   \   00000010   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000012   0xFB93 0xF5F4      SDIV     R5,R3,R4
   \   00000016   0xFB04 0x3315      MLS      R3,R4,R5,R3
   \   0000001A   0x4099             LSLS     R1,R1,R3
    411          
    412            /* Set the correct bit in RAM */
    413            G_aau8LcdRamImage[sPixelAddress_->u16PixelRowAddress][u8ColumnGroup] &= ~u8ColumBitPosition;
   \   0000001C   0x.... 0x....      LDR.W    R3,??DataTable14_2
   \   00000020   0x8804             LDRH     R4,[R0, #+0]
   \   00000022   0x0124             LSLS     R4,R4,#+4
   \   00000024   0x4423             ADD      R3,R3,R4
   \   00000026   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000028   0x.... 0x....      LDR.W    R4,??DataTable14_2
   \   0000002C   0x8805             LDRH     R5,[R0, #+0]
   \   0000002E   0x012D             LSLS     R5,R5,#+4
   \   00000030   0x442C             ADD      R4,R4,R5
   \   00000032   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000034   0x5CA4             LDRB     R4,[R4, R2]
   \   00000036   0x438C             BICS     R4,R4,R1
   \   00000038   0x549C             STRB     R4,[R3, R2]
    414            
    415          } /* end LcdClearPixel */
   \   0000003A   0xBC30             POP      {R4,R5}
   \   0000003C   0x4770             BX       LR               ;; return
    416          
    417          
    418          /*----------------------------------------------------------------------------------------------------------------------
    419          Function: LcdLoadBitmap
    420          
    421          Description:
    422          Loads a bitmap into the LCD RAM location specified.
    423          
    424          *** This function can violate 1ms system timing: need to make it better! ***
    425          
    426          Requires:
    427           - G_aau8LcdRamImage is a row x column matrix of 1-bit pixel values
    428           - The origin (0,0 pixel of the LCD RAM image) is at G_aau8LcdRamImage[0][0] bit 0
    429           - All LCD bitmaps are 2D arrays of pixel bits, where bit 0 at btimap[0][0] is the top left pixel
    430           - aau8Bitmap_ points to the first element of a 2D array. Since a 2D array cannot
    431             be passed directly, indexing will be done manually (i.e. to access the jth 
    432             element in the ith row aau8Bitmap_[i * u8ColumnSize_ + j] must be used instead 
    433             of aau8Bitmap_[i][j])
    434          
    435          
    436          Promises:
    437           - The bitmap is parsed and loaded into the local LCD RAM G_aau8LcdRamImage.
    438          */

   \                                 In section .text, align 2, keep-with-next
    439          void LcdLoadBitmap(u8 const* aau8Bitmap_, PixelBlockType* sBitmapSize_)
    440          {
   \                     LcdLoadBitmap: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    441            u8 u8CurrentBitMaskBitmap, u8CurrentBitMaskLcdRAM;
    442            u16 u16BitGroupBitmap, u16BitGroupLcdRAM;
    443            u8 u8RowIterations;
    444            u16 u16ColumnIterations;
    445            u16 u16Temp;
    446            
    447            /* Make sure there are at least some pixels inside the LCD screen area */
    448            if( (sBitmapSize_-> u16RowStart < LCD_ROWS) && (sBitmapSize_-> u16ColumnStart < LCD_COLUMNS) )
   \   00000008   0x8828             LDRH     R0,[R5, #+0]
   \   0000000A   0x2840             CMP      R0,#+64
   \   0000000C   0xF280 0x80B2      BGE.W    ??LcdLoadBitmap_0
   \   00000010   0x8868             LDRH     R0,[R5, #+2]
   \   00000012   0x2880             CMP      R0,#+128
   \   00000014   0xF280 0x80AE      BGE.W    ??LcdLoadBitmap_0
    449            {
    450              /* Setup the number of row iterations but check to prevent overflow */
    451              u8RowIterations = sBitmapSize_->u16RowSize;
   \   00000018   0x88A8             LDRH     R0,[R5, #+4]
   \   0000001A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    452              if( (sBitmapSize_->u16RowStart + u8RowIterations) > LCD_ROWS)
   \   0000001E   0x8828             LDRH     R0,[R5, #+0]
   \   00000020   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000024   0x1808             ADDS     R0,R1,R0
   \   00000026   0x2841             CMP      R0,#+65
   \   00000028   0xDB04             BLT.N    ??LcdLoadBitmap_1
    453              {
    454                u8RowIterations = LCD_ROWS - sBitmapSize_->u16RowStart;
   \   0000002A   0x8828             LDRH     R0,[R5, #+0]
   \   0000002C   0xF1D0 0x0040      RSBS     R0,R0,#+64
   \   00000030   0xF88D 0x0000      STRB     R0,[SP, #+0]
    455              }
    456              
    457              /* Setup the number of column iterations but check to prevent overflow */
    458              u16ColumnIterations = sBitmapSize_->u16ColumnSize;
   \                     ??LcdLoadBitmap_1: (+1)
   \   00000034   0x88E8             LDRH     R0,[R5, #+6]
   \   00000036   0x4683             MOV      R11,R0
    459              if( (sBitmapSize_->u16ColumnStart + u16ColumnIterations) > LCD_COLUMNS)
   \   00000038   0x8868             LDRH     R0,[R5, #+2]
   \   0000003A   0xFA1F 0xFB8B      UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
   \   0000003E   0xEB1B 0x0000      ADDS     R0,R11,R0
   \   00000042   0x2881             CMP      R0,#+129
   \   00000044   0xDB03             BLT.N    ??LcdLoadBitmap_2
    460              {
    461                u16ColumnIterations = LCD_COLUMNS - sBitmapSize_->u16ColumnStart;
   \   00000046   0x8868             LDRH     R0,[R5, #+2]
   \   00000048   0xF1D0 0x0080      RSBS     R0,R0,#+128
   \   0000004C   0x4683             MOV      R11,R0
    462              }
    463          
    464              /* Index i is the current row in the bitmap image, and the current row in the LCD RAM 
    465              image relative to sBitmapSize_->u16RowStart */
    466              for(u16 i = 0; i < u8RowIterations; i++)
   \                     ??LcdLoadBitmap_2: (+1)
   \   0000004E   0x2100             MOVS     R1,#+0
   \                     ??LcdLoadBitmap_3: (+1)
   \   00000050   0x0008             MOVS     R0,R1
   \   00000052   0xF89D 0x2000      LDRB     R2,[SP, #+0]
   \   00000056   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000058   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000005A   0x4290             CMP      R0,R2
   \   0000005C   0xF080 0x8087      BCS.W    ??LcdLoadBitmap_4
    467              {
    468                /* Sliding bit masks are used to mask out the current pixel data bit.  The image starts at bit 0. */
    469                u8CurrentBitMaskBitmap = 0x01;
   \   00000060   0x2001             MOVS     R0,#+1
   \   00000062   0x0006             MOVS     R6,R0
    470                u16BitGroupBitmap = 0;
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x4680             MOV      R8,R0
    471          
    472                /* The LCD RAM bit mask must start at whatever bit within the current group corresponds to the 
    473                starting column index */
    474                u8CurrentBitMaskLcdRAM =  0x01 << (sBitmapSize_->u16ColumnStart % 8);
   \   00000068   0x8868             LDRH     R0,[R5, #+2]
   \   0000006A   0x2208             MOVS     R2,#+8
   \   0000006C   0x2301             MOVS     R3,#+1
   \   0000006E   0xFB90 0xFCF2      SDIV     R12,R0,R2
   \   00000072   0xFB02 0x001C      MLS      R0,R2,R12,R0
   \   00000076   0xFA13 0xF000      LSLS     R0,R3,R0
   \   0000007A   0x0007             MOVS     R7,R0
    475                u16BitGroupLcdRAM = (sBitmapSize_->u16ColumnStart / 8);
   \   0000007C   0x8868             LDRH     R0,[R5, #+2]
   \   0000007E   0x2208             MOVS     R2,#+8
   \   00000080   0xFB90 0xF0F2      SDIV     R0,R0,R2
   \   00000084   0x4681             MOV      R9,R0
    476          
    477                /* Index j counts the current column (bitwise) in the image, and the current column in
    478                the LCD RAM relative to sBitmapSize_->u16ColumnStart.  The bitmasks and bitgroups work out the
    479                correct translation to the bytes in the images.  The bitmap must be indexed explicitly since we
    480                only have a pointer to a 1D array; the LCD RAM 2D array can be indexed normally. */
    481                for(u16 j = 0;  j < u16ColumnIterations; j++)
   \   00000086   0x2200             MOVS     R2,#+0
   \                     ??LcdLoadBitmap_5: (+1)
   \   00000088   0x0010             MOVS     R0,R2
   \   0000008A   0x465B             MOV      R3,R11
   \   0000008C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000008E   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000090   0x4298             CMP      R0,R3
   \   00000092   0xD26A             BCS.N    ??LcdLoadBitmap_6
    482                {
    483                  /* Get the linear index of the current bitmap byte 2D array - watch for incomplete bytes! */
    484                  if( (sBitmapSize_->u16ColumnSize % 8) == 0 )
   \   00000094   0x88E8             LDRH     R0,[R5, #+6]
   \   00000096   0x2308             MOVS     R3,#+8
   \   00000098   0xFB90 0xFCF3      SDIV     R12,R0,R3
   \   0000009C   0xFB03 0x001C      MLS      R0,R3,R12,R0
   \   000000A0   0x2800             CMP      R0,#+0
   \   000000A2   0xD10A             BNE.N    ??LcdLoadBitmap_7
    485                  {
    486                    u16Temp = (i * (sBitmapSize_->u16ColumnSize / 8) ) + u16BitGroupBitmap;
   \   000000A4   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000A6   0x88E8             LDRH     R0,[R5, #+6]
   \   000000A8   0x2308             MOVS     R3,#+8
   \   000000AA   0xFB90 0xF0F3      SDIV     R0,R0,R3
   \   000000AE   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000B2   0xFB00 0x8001      MLA      R0,R0,R1,R8
   \   000000B6   0x4682             MOV      R10,R0
   \   000000B8   0xE00A             B.N      ??LcdLoadBitmap_8
    487                  }
    488                  else
    489                  {
    490                    u16Temp = (i * ((sBitmapSize_->u16ColumnSize / 8) + 1)) + u16BitGroupBitmap;
   \                     ??LcdLoadBitmap_7: (+1)
   \   000000BA   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000BC   0x88E8             LDRH     R0,[R5, #+6]
   \   000000BE   0x2308             MOVS     R3,#+8
   \   000000C0   0xFB90 0xF0F3      SDIV     R0,R0,R3
   \   000000C4   0x1C40             ADDS     R0,R0,#+1
   \   000000C6   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000CA   0xFB00 0x8001      MLA      R0,R0,R1,R8
   \   000000CE   0x4682             MOV      R10,R0
    491                  }
    492                      
    493                  /* Set or clear appropirate bit in LCD RAM */
    494                  if( aau8Bitmap_[u16Temp] & u8CurrentBitMaskBitmap )
   \                     ??LcdLoadBitmap_8: (+1)
   \   000000D0   0xFA1F 0xFA8A      UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000000D4   0xF814 0x000A      LDRB     R0,[R4, R10]
   \   000000D8   0x4230             TST      R0,R6
   \   000000DA   0xD01A             BEQ.N    ??LcdLoadBitmap_9
    495                  {
    496                    G_aau8LcdRamImage[i + sBitmapSize_->u16RowStart][u16BitGroupLcdRAM] |= u8CurrentBitMaskLcdRAM;
   \   000000DC   0x.... 0x....      LDR.W    R0,??DataTable14_2
   \   000000E0   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000E2   0x882B             LDRH     R3,[R5, #+0]
   \   000000E4   0x185B             ADDS     R3,R3,R1
   \   000000E6   0x011B             LSLS     R3,R3,#+4
   \   000000E8   0x4418             ADD      R0,R0,R3
   \   000000EA   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000000EE   0x.... 0x....      LDR.W    R3,??DataTable14_2
   \   000000F2   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000F4   0xF8B5 0xC000      LDRH     R12,[R5, #+0]
   \   000000F8   0xEB1C 0x0C01      ADDS     R12,R12,R1
   \   000000FC   0xEA5F 0x1C0C      LSLS     R12,R12,#+4
   \   00000100   0x4463             ADD      R3,R3,R12
   \   00000102   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000106   0xF813 0x3009      LDRB     R3,[R3, R9]
   \   0000010A   0x433B             ORRS     R3,R7,R3
   \   0000010C   0xF800 0x3009      STRB     R3,[R0, R9]
   \   00000110   0xE019             B.N      ??LcdLoadBitmap_10
    497                  }
    498                  else
    499                  {
    500                    G_aau8LcdRamImage[i + sBitmapSize_->u16RowStart][u16BitGroupLcdRAM] &= ~u8CurrentBitMaskLcdRAM;
   \                     ??LcdLoadBitmap_9: (+1)
   \   00000112   0x.... 0x....      LDR.W    R0,??DataTable14_2
   \   00000116   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000118   0x882B             LDRH     R3,[R5, #+0]
   \   0000011A   0x185B             ADDS     R3,R3,R1
   \   0000011C   0x011B             LSLS     R3,R3,#+4
   \   0000011E   0x4418             ADD      R0,R0,R3
   \   00000120   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000124   0x.... 0x....      LDR.W    R3,??DataTable14_2
   \   00000128   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000012A   0xF8B5 0xC000      LDRH     R12,[R5, #+0]
   \   0000012E   0xEB1C 0x0C01      ADDS     R12,R12,R1
   \   00000132   0xEA5F 0x1C0C      LSLS     R12,R12,#+4
   \   00000136   0x4463             ADD      R3,R3,R12
   \   00000138   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000013C   0xF813 0x3009      LDRB     R3,[R3, R9]
   \   00000140   0x43BB             BICS     R3,R3,R7
   \   00000142   0xF800 0x3009      STRB     R3,[R0, R9]
    501                  }
    502          
    503                  /* Shift the bitmap mask */
    504                  u8CurrentBitMaskBitmap <<= 1;
   \                     ??LcdLoadBitmap_10: (+1)
   \   00000146   0x0076             LSLS     R6,R6,#+1
    505                  if(u8CurrentBitMaskBitmap == 0x00)
   \   00000148   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000014A   0x2E00             CMP      R6,#+0
   \   0000014C   0xD103             BNE.N    ??LcdLoadBitmap_11
    506                  {
    507                    u8CurrentBitMaskBitmap = 0x01;
   \   0000014E   0x2001             MOVS     R0,#+1
   \   00000150   0x0006             MOVS     R6,R0
    508                    u16BitGroupBitmap++;
   \   00000152   0xF118 0x0801      ADDS     R8,R8,#+1
    509                  }
    510                  
    511                  /* Shift the LCD RAM mask */
    512                  u8CurrentBitMaskLcdRAM <<= 1;
   \                     ??LcdLoadBitmap_11: (+1)
   \   00000156   0x007F             LSLS     R7,R7,#+1
    513                  if(u8CurrentBitMaskLcdRAM == 0x00)
   \   00000158   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000015A   0x2F00             CMP      R7,#+0
   \   0000015C   0xD103             BNE.N    ??LcdLoadBitmap_12
    514                  {
    515                    u8CurrentBitMaskLcdRAM = 0x01;
   \   0000015E   0x2001             MOVS     R0,#+1
   \   00000160   0x0007             MOVS     R7,R0
    516                    u16BitGroupLcdRAM++;
   \   00000162   0xF119 0x0901      ADDS     R9,R9,#+1
    517                  }
    518                } /* end column loop */
   \                     ??LcdLoadBitmap_12: (+1)
   \   00000166   0x1C52             ADDS     R2,R2,#+1
   \   00000168   0xE78E             B.N      ??LcdLoadBitmap_5
    519              } /* end row loop */
   \                     ??LcdLoadBitmap_6: (+1)
   \   0000016A   0x1C49             ADDS     R1,R1,#+1
   \   0000016C   0xE770             B.N      ??LcdLoadBitmap_3
    520          
    521              /* Update the refresh area for the next LCD refresh */
    522              LcdUpdateScreenRefreshArea(sBitmapSize_);
   \                     ??LcdLoadBitmap_4: (+1)
   \   0000016E   0x0028             MOVS     R0,R5
   \   00000170   0x.... 0x....      BL       LcdUpdateScreenRefreshArea
    523            }
    524          
    525          } /* end LcdLoadBitmap() */
   \                     ??LcdLoadBitmap_0: (+1)
   \   00000174   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    526          
    527          
    528          /*----------------------------------------------------------------------------------------------------------------------
    529          Function: LcdClearPixels
    530          
    531          Description:
    532          Sets a rectangular section of LCD RAM to 0 (clear). Verified for full screen clear.
    533          
    534          Requires:
    535           - The origin (0,0 pixel) is at the top left of the LCD screen
    536           - sPixelsToClear_ points to a PixelBlockType initialized to define the area to clear
    537          
    538          Promises:
    539           - A u16RowSize_ x u16ColumnSize_ block of pixels in LCD RAM starting at u16RowStart, u16ColumnStart
    540             will be set to 0; if the area defined exceeds the area available, the overflowing addresses will be ignored
    541          */

   \                                 In section .text, align 2, keep-with-next
    542          void LcdClearPixels(PixelBlockType* sPixelsToClear_)
    543          {
   \                     LcdClearPixels: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
    544            u8 u8CurrentBitMask;
    545            u16 u16BitGroup;
    546            u8 u8RowIterations;
    547            u16 u16ColumnIterations;
    548            
    549            /* Setup the number of row iterations but check to prevent overflow */
    550            u8RowIterations = sPixelsToClear_->u16RowSize;
   \   00000006   0x88A0             LDRH     R0,[R4, #+4]
   \   00000008   0x0007             MOVS     R7,R0
    551            if( (sPixelsToClear_->u16RowStart + u8RowIterations) > LCD_ROWS )
   \   0000000A   0x8820             LDRH     R0,[R4, #+0]
   \   0000000C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000000E   0x1838             ADDS     R0,R7,R0
   \   00000010   0x2841             CMP      R0,#+65
   \   00000012   0xDB03             BLT.N    ??LcdClearPixels_0
    552            {
    553              u8RowIterations = LCD_ROWS - sPixelsToClear_->u16RowStart;
   \   00000014   0x8820             LDRH     R0,[R4, #+0]
   \   00000016   0xF1D0 0x0040      RSBS     R0,R0,#+64
   \   0000001A   0x0007             MOVS     R7,R0
    554            }
    555            
    556            /* Setup the number of column iterations but check to prevent overflow */
    557            u16ColumnIterations = sPixelsToClear_->u16ColumnSize;
   \                     ??LcdClearPixels_0: (+1)
   \   0000001C   0x88E0             LDRH     R0,[R4, #+6]
   \   0000001E   0x4680             MOV      R8,R0
    558            if( (sPixelsToClear_->u16ColumnStart + u16ColumnIterations) > LCD_COLUMNS)
   \   00000020   0x8860             LDRH     R0,[R4, #+2]
   \   00000022   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000026   0xEB18 0x0000      ADDS     R0,R8,R0
   \   0000002A   0x2881             CMP      R0,#+129
   \   0000002C   0xDB03             BLT.N    ??LcdClearPixels_1
    559            {
    560              u16ColumnIterations = LCD_COLUMNS - sPixelsToClear_->u16ColumnStart;
   \   0000002E   0x8860             LDRH     R0,[R4, #+2]
   \   00000030   0xF1D0 0x0080      RSBS     R0,R0,#+128
   \   00000034   0x4680             MOV      R8,R0
    561            }
    562          
    563            /* Index i is the current row in the LCD RAM */
    564            for(u16 i = sPixelsToClear_->u16RowStart; i < (sPixelsToClear_->u16RowStart + u8RowIterations); i++)
   \                     ??LcdClearPixels_1: (+1)
   \   00000036   0x8820             LDRH     R0,[R4, #+0]
   \                     ??LcdClearPixels_2: (+1)
   \   00000038   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003A   0x8821             LDRH     R1,[R4, #+0]
   \   0000003C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000003E   0x1879             ADDS     R1,R7,R1
   \   00000040   0x4288             CMP      R0,R1
   \   00000042   0xDA30             BGE.N    ??LcdClearPixels_3
    565            {
    566              /* A sliding bit mask is used to mask out the current pixel data bit in the array */
    567              u16BitGroup = (sPixelsToClear_->u16ColumnStart / 8);
   \   00000044   0x8861             LDRH     R1,[R4, #+2]
   \   00000046   0x2208             MOVS     R2,#+8
   \   00000048   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   0000004C   0x000E             MOVS     R6,R1
    568              u8CurrentBitMask = 0x01 << (sPixelsToClear_->u16ColumnStart % 8);
   \   0000004E   0x8861             LDRH     R1,[R4, #+2]
   \   00000050   0x2208             MOVS     R2,#+8
   \   00000052   0x2301             MOVS     R3,#+1
   \   00000054   0xFB91 0xFCF2      SDIV     R12,R1,R2
   \   00000058   0xFB02 0x111C      MLS      R1,R2,R12,R1
   \   0000005C   0xFA13 0xF101      LSLS     R1,R3,R1
   \   00000060   0x000D             MOVS     R5,R1
    569          
    570              /* Index j counts the current column (bitwise) in the LCD RAM relative to the starting column */
    571              for(u16 j = 0;  j < u16ColumnIterations; j++)
   \   00000062   0x2100             MOVS     R1,#+0
   \                     ??LcdClearPixels_4: (+1)
   \   00000064   0x000A             MOVS     R2,R1
   \   00000066   0x4643             MOV      R3,R8
   \   00000068   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000006A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000006C   0x429A             CMP      R2,R3
   \   0000006E   0xD218             BCS.N    ??LcdClearPixels_5
    572              {
    573                /* Clear the current bit */
    574                G_aau8LcdRamImage[i][u16BitGroup] &=  ~u8CurrentBitMask;
   \   00000070   0x.... 0x....      LDR.W    R2,??DataTable14_2
   \   00000074   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000076   0x0103             LSLS     R3,R0,#+4
   \   00000078   0x441A             ADD      R2,R2,R3
   \   0000007A   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000007C   0x.... 0x....      LDR.W    R3,??DataTable14_2
   \   00000080   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000082   0xEA5F 0x1C00      LSLS     R12,R0,#+4
   \   00000086   0x4463             ADD      R3,R3,R12
   \   00000088   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000008A   0x5D9B             LDRB     R3,[R3, R6]
   \   0000008C   0x43AB             BICS     R3,R3,R5
   \   0000008E   0x5593             STRB     R3,[R2, R6]
    575                
    576                /* Adjust the bit mask watching for advance to the next bit group */
    577                u8CurrentBitMask <<= 1;
   \   00000090   0x006D             LSLS     R5,R5,#+1
    578                if(u8CurrentBitMask == 0x00)
   \   00000092   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000094   0x2D00             CMP      R5,#+0
   \   00000096   0xD102             BNE.N    ??LcdClearPixels_6
    579                {
    580                  u8CurrentBitMask = 0x01;
   \   00000098   0x2201             MOVS     R2,#+1
   \   0000009A   0x0015             MOVS     R5,R2
    581                  u16BitGroup++;
   \   0000009C   0x1C76             ADDS     R6,R6,#+1
    582                }
    583              } /* end column loop */
   \                     ??LcdClearPixels_6: (+1)
   \   0000009E   0x1C49             ADDS     R1,R1,#+1
   \   000000A0   0xE7E0             B.N      ??LcdClearPixels_4
    584            } /* end row loop */
   \                     ??LcdClearPixels_5: (+1)
   \   000000A2   0x1C40             ADDS     R0,R0,#+1
   \   000000A4   0xE7C8             B.N      ??LcdClearPixels_2
    585          
    586            LcdUpdateScreenRefreshArea(sPixelsToClear_);
   \                     ??LcdClearPixels_3: (+1)
   \   000000A6   0x0020             MOVS     R0,R4
   \   000000A8   0x.... 0x....      BL       LcdUpdateScreenRefreshArea
    587            
    588          } /* end LcdClearPixels() */
   \   000000AC   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    589          
    590          
    591          /*----------------------------------------------------------------------------------------------------------------------
    592          Function: LcdClearScreen
    593          
    594          Description:
    595          Clears all pixel data.
    596          
    597          Requires:
    598           - 
    599          
    600          Promises:
    601           - G_aau8LcdRamImage[i][j] = 0 for 
    602          */

   \                                 In section .text, align 2, keep-with-next
    603          void LcdClearScreen(void)
    604          {
   \                     LcdClearScreen: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    605            /* Zero out all of the image array */
    606            for(u16 i = 0; i < LCD_IMAGE_ROWS; i++)
   \   00000002   0x2000             MOVS     R0,#+0
   \                     ??LcdClearScreen_0: (+1)
   \   00000004   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000006   0x2840             CMP      R0,#+64
   \   00000008   0xDA0F             BGE.N    ??LcdClearScreen_1
    607            {
    608              for(u16 j = 0; j < LCD_IMAGE_COLUMNS; j++)
   \   0000000A   0x2100             MOVS     R1,#+0
   \                     ??LcdClearScreen_2: (+1)
   \   0000000C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000E   0x2910             CMP      R1,#+16
   \   00000010   0xDA09             BGE.N    ??LcdClearScreen_3
    609              {
    610                G_aau8LcdRamImage[i][j] = 0;
   \   00000012   0x.... 0x....      LDR.W    R2,??DataTable14_2
   \   00000016   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000018   0x0103             LSLS     R3,R0,#+4
   \   0000001A   0x441A             ADD      R2,R2,R3
   \   0000001C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001E   0x2300             MOVS     R3,#+0
   \   00000020   0x5453             STRB     R3,[R2, R1]
    611              }
   \   00000022   0x1C49             ADDS     R1,R1,#+1
   \   00000024   0xE7F2             B.N      ??LcdClearScreen_2
    612            }
   \                     ??LcdClearScreen_3: (+1)
   \   00000026   0x1C40             ADDS     R0,R0,#+1
   \   00000028   0xE7EC             B.N      ??LcdClearScreen_0
    613                
    614            /* Queue to refresh whole screen */
    615            LcdUpdateScreenRefreshArea(&G_sLcdClearWholeScreen);
   \                     ??LcdClearScreen_1: (+1)
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable14_3
   \   0000002E   0x.... 0x....      BL       LcdUpdateScreenRefreshArea
    616            
    617          } /* end LcdClearScreen() */
   \   00000032   0xBD01             POP      {R0,PC}          ;; return
    618          
    619          
    620          /*----------------------------------------------------------------------------------------------------------------------
    621          Function: LcdShift
    622          
    623          Description:
    624          Moves the pixels in a section of the LCD by a certain number of pixels in some direction.  
    625          This function can be used for simple animations or for scrolling text.  Note that any pixels
    626          that are shifted outside of the defined area are lost.  This ensures that the function will
    627          not try to write pixels not on the screen, and that pixels moving inside a block will not
    628          overwrite into adjacent LCD pixels.
    629          
    630          Requires:
    631           - eShiftArea_ defines the LCD area in which the pixels will move
    632           - u16PixelsToShift_ is the number of pixels to shift
    633           - eDirection_ is the direction in which the pixels will shift
    634          
    635          Promises:
    636           - A u16RowSize_ x u16ColumnSize_ block of pixels in LCD RAM starting at u16RowStart, u16ColumnStart
    637             will be set to 0; if the area defined exceeds the area available, the overflowing addresses will be ignored
    638          */

   \                                 In section .text, align 2, keep-with-next
    639          void LcdShift(PixelBlockType eShiftArea_, u16 u16PixelsToShift_, LcdShiftType eDirection_)
    640          {
    641            /* To be added some day */
    642            
    643          } /* end LcdShift() */
   \                     LcdShift: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    644          
    645          
    646          /*----------------------------------------------------------------------------------------------------------------------
    647          Function: LcdCommand
    648          
    649          Description:
    650          Simple interface to use to queue a particular command to send to the LCD.  This only
    651          applies to single-byte commands.
    652          
    653          Requires:
    654           - u8Command_ is a valid A0 type command for the LCD (see list in lcd_NHD-C12864LZ.h)
    655          
    656          Promises:
    657           - A command message is queued to the TxBuffer
    658          */

   \                                 In section .text, align 2, keep-with-next
    659          bool LcdCommand(u8 u8Command_)
    660          {
   \                     LcdCommand: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    661            if( !(Lcd_u32Flags & _LCD_FLAGS_COMMAND_IN_QUEUE) )
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable14_4
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x07C0             LSLS     R0,R0,#+31
   \   0000000C   0xD422             BMI.N    ??LcdCommand_0
    662            {
    663              Lcd_u32Flags |= _LCD_FLAGS_COMMAND_IN_QUEUE;
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable14_4
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable14_4
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    664              Lcd_au8TxBuffer[0] = u8Command_;
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable14_5
   \   00000022   0x7004             STRB     R4,[R0, #+0]
    665            
    666              /* Set hardware for command mode and queue the message */
    667              LCD_COMMAND_MODE();
   \   00000024   0xF44F 0x4000      MOV      R0,#+32768
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable14_6  ;; 0x400e0e34
   \   0000002C   0x6008             STR      R0,[R1, #+0]
    668              Lcd_u32CurrentMsgToken = SspWriteData(Lcd_Ssp, 1, &Lcd_au8TxBuffer[0]);
   \   0000002E   0x.... 0x....      LDR.W    R2,??DataTable14_5
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable14_7
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x.... 0x....      BL       SspWriteData
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable14_8
   \   00000042   0x6008             STR      R0,[R1, #+0]
    669              
    670              /* Zero the timer so the command sends immediately and push the command out if initializing */
    671              Lcd_u32RefreshTimer = 0;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable14_9
   \   0000004A   0x6008             STR      R0,[R1, #+0]
    672              LcdManualMode();
   \   0000004C   0x.... 0x....      BL       LcdManualMode
    673              
    674              return TRUE;
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0xE000             B.N      ??LcdCommand_1
    675            }
    676          
    677            return FALSE;
   \                     ??LcdCommand_0: (+1)
   \   00000054   0x2000             MOVS     R0,#+0
   \                     ??LcdCommand_1: (+1)
   \   00000056   0xBD10             POP      {R4,PC}          ;; return
    678            
    679          } /* end LcdCommand() */
    680          
    681          
    682          /*--------------------------------------------------------------------------------------------------------------------*/
    683          /* Protected Functions */
    684          /*--------------------------------------------------------------------------------------------------------------------*/
    685          
    686          /*----------------------------------------------------------------------------------------------------------------------
    687          Function: LcdInitialize
    688          
    689          Description:
    690          Initialize the local LCD RAM then boot and initialize the LCD.  Since so much 
    691          data is transferred to the LCD and speed is essential, LCD transfers are
    692          generally assumed to work.  Unless critical data is being sent, then no checking
    693          is done during data transmission.
    694          Requires:
    695            - LCD SPI peripheral is initialized and ready for communication
    696          
    697          Promises:
    698            - G_aau8LcdRamImage[LCD_IMAGE_ROWS][LCD_IMAGE_COLUMNS] = 0;
    699            - LCD is initialized and turned on
    700          */

   \                                 In section .text, align 2, keep-with-next
    701          void LcdInitialize(void)
    702          {
   \                     LcdInitialize: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
    703            u8 u8Size;
    704            PixelBlockType sEngenuicsImage;
    705            PixelAddressType sStringLocation;
    706            
    707            /* Start with backlight on */
    708            LCD_BACKLIGHT_ON();
   \   00000002   0x200C             MOVS     R0,#+12
   \   00000004   0x.... 0x....      BL       LedOn
    709            
    710            /* Initialize variables */
    711            Lcd_u32RefreshTimer = G_u32SystemTime1ms;
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable14_10
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable14_9
   \   00000012   0x6008             STR      R0,[R1, #+0]
    712            Lcd_pfnStateMachine = LcdSM_Idle;
   \   00000014   0x.... 0x....      ADR.W    R0,LcdSM_Idle
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable14_11
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    713            Lcd_pu8RxDummyBuffer = Lcd_au8RxDummyBuffer;
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable14_12
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable14_13
   \   00000026   0x6008             STR      R0,[R1, #+0]
    714            
    715            /* Configure the SSP resource to be used for the application */
    716            Lcd_sSspConfig.SspPeripheral      = USART1;
   \   00000028   0x2003             MOVS     R0,#+3
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable14_14
   \   0000002E   0x7008             STRB     R0,[R1, #+0]
    717            Lcd_sSspConfig.pCsGpioAddress     = AT91C_BASE_PIOB;
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable14_15  ;; 0x400e0e00
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable14_14
   \   00000038   0x6048             STR      R0,[R1, #+4]
    718            Lcd_sSspConfig.u32CsPin           = PB_12_LCD_CS;
   \   0000003A   0xF44F 0x5080      MOV      R0,#+4096
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable14_14
   \   00000042   0x6088             STR      R0,[R1, #+8]
    719            Lcd_sSspConfig.pu8RxBufferAddress = Lcd_au8RxDummyBuffer;
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable14_12
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable14_14
   \   0000004C   0x6188             STR      R0,[R1, #+24]
    720            Lcd_sSspConfig.ppu8RxNextByte     = &Lcd_pu8RxDummyBuffer;
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable14_13
   \   00000052   0x.... 0x....      LDR.W    R1,??DataTable14_14
   \   00000056   0x61C8             STR      R0,[R1, #+28]
    721            Lcd_sSspConfig.u16RxBufferSize    = LCD_RX_BUFFER_SIZE;
   \   00000058   0x2001             MOVS     R0,#+1
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable14_14
   \   0000005E   0x8408             STRH     R0,[R1, #+32]
    722            Lcd_sSspConfig.eBitOrder          = MSB_FIRST;
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable14_14
   \   00000066   0x7308             STRB     R0,[R1, #+12]
    723            Lcd_sSspConfig.eSspMode           = SPI_MASTER_AUTO_CS;
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x.... 0x....      LDR.W    R1,??DataTable14_14
   \   0000006E   0x7348             STRB     R0,[R1, #+13]
    724          
    725            Lcd_Ssp = SspRequest(&Lcd_sSspConfig);
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable14_14
   \   00000074   0x.... 0x....      BL       SspRequest
   \   00000078   0x.... 0x....      LDR.W    R1,??DataTable14_7
   \   0000007C   0x6008             STR      R0,[R1, #+0]
    726                  
    727            /* Carry out the prescribed LCD initialization starting with delay after releasing reset */
    728            LCD_CS_ASSERT();
   \   0000007E   0xF44F 0x5080      MOV      R0,#+4096
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable14_6  ;; 0x400e0e34
   \   00000086   0x6008             STR      R0,[R1, #+0]
    729            LCD_RESET_DEASSERT();
   \   00000088   0xF44F 0x4080      MOV      R0,#+16384
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable14_16  ;; 0x400e0e30
   \   00000090   0x6008             STR      R0,[R1, #+0]
    730            for(u32 i = 0; i < 10; i++);
   \   00000092   0x2000             MOVS     R0,#+0
   \                     ??LcdInitialize_0: (+1)
   \   00000094   0x280A             CMP      R0,#+10
   \   00000096   0xD201             BCS.N    ??LcdInitialize_1
   \   00000098   0x1C40             ADDS     R0,R0,#+1
   \   0000009A   0xE7FB             B.N      ??LcdInitialize_0
    731            
    732            LCD_RESET_ASSERT();
   \                     ??LcdInitialize_1: (+1)
   \   0000009C   0xF44F 0x4080      MOV      R0,#+16384
   \   000000A0   0x.... 0x....      LDR.W    R1,??DataTable14_6  ;; 0x400e0e34
   \   000000A4   0x6008             STR      R0,[R1, #+0]
    733          
    734            Lcd_u32Timer = G_u32SystemTime1ms;
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable14_10
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0x.... 0x....      LDR.W    R1,??DataTable14_17
   \   000000B0   0x6008             STR      R0,[R1, #+0]
    735            while( !IsTimeUp(&Lcd_u32Timer, 2) );
   \                     ??LcdInitialize_2: (+1)
   \   000000B2   0x2102             MOVS     R1,#+2
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable14_17
   \   000000B8   0x.... 0x....      BL       IsTimeUp
   \   000000BC   0x2800             CMP      R0,#+0
   \   000000BE   0xD0F8             BEQ.N    ??LcdInitialize_2
    736          
    737            LCD_RESET_DEASSERT();
   \   000000C0   0xF44F 0x4080      MOV      R0,#+16384
   \   000000C4   0x.... 0x....      LDR.W    R1,??DataTable14_16  ;; 0x400e0e30
   \   000000C8   0x6008             STR      R0,[R1, #+0]
    738          
    739            Lcd_u32Timer = G_u32SystemTime1ms;
   \   000000CA   0x.... 0x....      LDR.W    R0,??DataTable14_10
   \   000000CE   0x6800             LDR      R0,[R0, #+0]
   \   000000D0   0x.... 0x....      LDR.W    R1,??DataTable14_17
   \   000000D4   0x6008             STR      R0,[R1, #+0]
    740            while( !IsTimeUp(&Lcd_u32Timer, 2) );
   \                     ??LcdInitialize_3: (+1)
   \   000000D6   0x2102             MOVS     R1,#+2
   \   000000D8   0x.... 0x....      LDR.W    R0,??DataTable14_17
   \   000000DC   0x.... 0x....      BL       IsTimeUp
   \   000000E0   0x2800             CMP      R0,#+0
   \   000000E2   0xD0F8             BEQ.N    ??LcdInitialize_3
    741           
    742            /* Send settings array one command at a time - end with display and pixel test on */
    743            u8Size = sizeof(Lcd_au8SetupArray);
   \   000000E4   0x200B             MOVS     R0,#+11
   \   000000E6   0x0004             MOVS     R4,R0
    744            for(u8 i = 0; i < u8Size; i++)
   \   000000E8   0x2500             MOVS     R5,#+0
   \                     ??LcdInitialize_4: (+1)
   \   000000EA   0x0028             MOVS     R0,R5
   \   000000EC   0x0021             MOVS     R1,R4
   \   000000EE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000F2   0x4288             CMP      R0,R1
   \   000000F4   0xD214             BCS.N    ??LcdInitialize_5
    745            {
    746              LcdCommand(Lcd_au8SetupArray[i]);
   \   000000F6   0x.... 0x....      LDR.W    R0,??DataTable14_18
   \   000000FA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000FC   0x5D40             LDRB     R0,[R0, R5]
   \   000000FE   0x.... 0x....      BL       LcdCommand
    747              Lcd_u32Timer = G_u32SystemTime1ms;
   \   00000102   0x.... 0x....      LDR.W    R0,??DataTable14_10
   \   00000106   0x6800             LDR      R0,[R0, #+0]
   \   00000108   0x.... 0x....      LDR.W    R1,??DataTable14_17
   \   0000010C   0x6008             STR      R0,[R1, #+0]
    748              while( !IsTimeUp(&Lcd_u32Timer, 5) );
   \                     ??LcdInitialize_6: (+1)
   \   0000010E   0x2105             MOVS     R1,#+5
   \   00000110   0x.... 0x....      LDR.W    R0,??DataTable14_17
   \   00000114   0x.... 0x....      BL       IsTimeUp
   \   00000118   0x2800             CMP      R0,#+0
   \   0000011A   0xD0F8             BEQ.N    ??LcdInitialize_6
    749            }
   \   0000011C   0x1C6D             ADDS     R5,R5,#+1
   \   0000011E   0xE7E4             B.N      ??LcdInitialize_4
    750            
    751            /* Clear LCD pixel data */
    752            LcdClearPixels(&G_sLcdClearWholeScreen);
   \                     ??LcdInitialize_5: (+1)
   \   00000120   0x.... 0x....      LDR.W    R0,??DataTable14_3
   \   00000124   0x.... 0x....      BL       LcdClearPixels
    753            LcdManualMode();
   \   00000128   0x.... 0x....      BL       LcdManualMode
    754           
    755            /* Short pixel test */  
    756            Lcd_u32Timer = G_u32SystemTime1ms;
   \   0000012C   0x.... 0x....      LDR.W    R0,??DataTable14_10
   \   00000130   0x6800             LDR      R0,[R0, #+0]
   \   00000132   0x.... 0x....      LDR.W    R1,??DataTable14_17
   \   00000136   0x6008             STR      R0,[R1, #+0]
    757            while( !IsTimeUp(&Lcd_u32Timer, 500) );
   \                     ??LcdInitialize_7: (+1)
   \   00000138   0xF44F 0x71FA      MOV      R1,#+500
   \   0000013C   0x.... 0x....      LDR.W    R0,??DataTable14_17
   \   00000140   0x.... 0x....      BL       IsTimeUp
   \   00000144   0x2800             CMP      R0,#+0
   \   00000146   0xD0F7             BEQ.N    ??LcdInitialize_7
    758            
    759            LcdCommand(LCD_PIXEL_TEST_OFF);
   \   00000148   0x20A4             MOVS     R0,#+164
   \   0000014A   0x.... 0x....      BL       LcdCommand
    760            
    761          #if LCD_STARTUP_ANIMATION
    762            /* Divide the Engenuics logo up into 4 equal pieces and put them at the corner of the LCD to 
    763            ensure that the full range of pixels is being addressed correctly */
    764            u8 u8RowPosition = 0;
    765            for(u8 i = 0; i < 40; i++)
    766            {
    767              LcdClearPixels(&G_sLcdClearWholeScreen);
    768            
    769              /* Top left */
    770              sEngenuicsImage.u16RowStart = 0;
    771              sEngenuicsImage.u16ColumnStart = i;
    772              sEngenuicsImage.u16RowSize = 25;
    773              sEngenuicsImage.u16ColumnSize = 25;
    774              LcdLoadBitmap(&aau8EngenuicsLogoBlackQ1[0][0], &sEngenuicsImage);
    775            
    776              /* Top right */
    777              sEngenuicsImage.u16RowStart = 0;
    778              sEngenuicsImage.u16ColumnStart = LCD_COLUMNS - 25 - i;
    779              LcdLoadBitmap(&aau8EngenuicsLogoBlackQ2[0][0], &sEngenuicsImage);
    780            
    781              /* Bottom left */
    782              sEngenuicsImage.u16RowStart = LCD_ROWS - 25 - u8RowPosition;
    783              sEngenuicsImage.u16ColumnStart = i;
    784              LcdLoadBitmap(&aau8EngenuicsLogoBlackQ3[0][0], &sEngenuicsImage);
    785              
    786              /* Bottom right */
    787              sEngenuicsImage.u16RowStart = LCD_ROWS - 25 - u8RowPosition;
    788              sEngenuicsImage.u16ColumnStart = LCD_COLUMNS - 25 - i;
    789              LcdLoadBitmap(&aau8EngenuicsLogoBlackQ4[0][0], &sEngenuicsImage);
    790            
    791              /* Write the MPGL2 String in the middle */
    792              sStringLocation.u16PixelColumnAddress = LCD_CENTER_COLUMN - ( strlen((char const*)Lcd_au8MessageWelcome) * (LCD_SMALL_FONT_COLUMNS + LCD_SMALL_FONT_SPACE) / 2 );
    793              sStringLocation.u16PixelRowAddress = LCD_SMALL_FONT_LINE7;
    794              LcdLoadString(Lcd_au8MessageWelcome, LCD_FONT_SMALL, &sStringLocation);
    795              LcdManualMode();
    796                 
    797              /* Adjust the row by one every few iterations */
    798              if( (i % 3) == 0)
    799              {
    800                u8RowPosition++;
    801                /* On the last iteration set, adjust one more row to bring the icon together */
    802                if(u8RowPosition == 13)
    803                {
    804                  u8RowPosition = 14;
    805                }
    806              }
    807            }
    808            
    809          #else /* LCD_STARTUP_ANIMATION */
    810            
    811            /* Show static image in middle of screen */
    812            LcdClearPixels(&G_sLcdClearWholeScreen);
   \   0000014E   0x.... 0x....      LDR.W    R0,??DataTable14_3
   \   00000152   0x.... 0x....      BL       LcdClearPixels
    813            
    814            sEngenuicsImage.u16RowStart = 0;
   \   00000156   0x2000             MOVS     R0,#+0
   \   00000158   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    815            sEngenuicsImage.u16ColumnStart = 40;
   \   0000015C   0x2028             MOVS     R0,#+40
   \   0000015E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    816            sEngenuicsImage.u16RowSize = LCD_IMAGE_ROW_SIZE_50PX;
   \   00000162   0x2032             MOVS     R0,#+50
   \   00000164   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    817            sEngenuicsImage.u16ColumnSize = LCD_IMAGE_COL_SIZE_50PX;
   \   00000168   0x2032             MOVS     R0,#+50
   \   0000016A   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    818            LcdLoadBitmap(&aau8EngenuicsLogoBlack[0][0], &sEngenuicsImage);
   \   0000016E   0xA901             ADD      R1,SP,#+4
   \   00000170   0x.... 0x....      LDR.W    R0,??DataTable14_19
   \   00000174   0x.... 0x....      BL       LcdLoadBitmap
    819          
    820            /* Write the MPGL2 String in the middle */
    821            sStringLocation.u16PixelColumnAddress = LCD_CENTER_COLUMN - ( strlen((char const*)Lcd_au8MessageWelcome) * (LCD_SMALL_FONT_COLUMNS + LCD_SMALL_FONT_SPACE) / 2 );
   \   00000178   0x.... 0x....      LDR.W    R0,??DataTable14_20
   \   0000017C   0x.... 0x....      BL       strlen
   \   00000180   0x2106             MOVS     R1,#+6
   \   00000182   0x4348             MULS     R0,R1,R0
   \   00000184   0x0840             LSRS     R0,R0,#+1
   \   00000186   0xF1D0 0x0040      RSBS     R0,R0,#+64
   \   0000018A   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    822            sStringLocation.u16PixelRowAddress = LCD_SMALL_FONT_LINE7;
   \   0000018E   0x2038             MOVS     R0,#+56
   \   00000190   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    823            LcdLoadString(Lcd_au8MessageWelcome, LCD_FONT_SMALL, &sStringLocation);
   \   00000194   0x466A             MOV      R2,SP
   \   00000196   0x2100             MOVS     R1,#+0
   \   00000198   0x.... 0x....      LDR.W    R0,??DataTable14_20
   \   0000019C   0x.... 0x....      BL       LcdLoadString
    824          
    825            LcdManualMode();
   \   000001A0   0x.... 0x....      BL       LcdManualMode
    826          #endif /* LCD_STARTUP_ANIMATION */
    827          
    828            /* Announce on the debug port that LCD setup is ready */
    829            G_u32ApplicationFlags |= _APPLICATION_FLAGS_LCD;
   \   000001A4   0x.... 0x....      LDR.W    R0,??DataTable14_21
   \   000001A8   0x6800             LDR      R0,[R0, #+0]
   \   000001AA   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   000001AE   0x.... 0x....      LDR.W    R1,??DataTable14_21
   \   000001B2   0x6008             STR      R0,[R1, #+0]
    830            DebugPrintf(Lcd_au8MessageInit);
   \   000001B4   0x.... 0x....      LDR.W    R0,??DataTable14_22
   \   000001B8   0x.... 0x....      BL       DebugPrintf
    831            
    832          } /* end LcdInitialize() */
   \   000001BC   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    833          
    834          
    835          /*----------------------------------------------------------------------------------------------------------------------
    836          Function LcdRunActiveState()
    837          
    838          Description:
    839          Selects and runs one iteration of the current state in the state machine.
    840          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    841          may take 1ms / n to execute.
    842          
    843          Requires:
    844            - State machine function pointer points at current state
    845          
    846          Promises:
    847            - Calls the function to pointed by the state machine function pointer
    848          */

   \                                 In section .text, align 2, keep-with-next
    849          void LcdRunActiveState(void)
    850          {
   \                     LcdRunActiveState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    851            Lcd_pfnStateMachine();
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable14_11
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x4780             BLX      R0
    852          
    853          } /* end LcdRunActiveState */
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    854          
    855          
    856          /*----------------------------------------------------------------------------------------------------------------------
    857          Function: LcdManualMode
    858          
    859          Description:
    860          Runs a cycle of the LCD state machine until there are no messages queued up to transmit.
    861          
    862          *** Violates 1ms system timing: use only during initialization ***
    863          
    864          Requires:
    865           - SSP state machine ready for manual mode
    866                     
    867          Promises:
    868           - The current command for an LCD will be sent; or an LCD refresh will be carried out.
    869            
    870          */

   \                                 In section .text, align 2, keep-with-next
    871          void LcdManualMode(void)
    872          {
   \                     LcdManualMode: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    873            u32 u32ManualModeTimer;
    874            
    875            if(G_u32SystemFlags & _SYSTEM_INITIALIZING)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable14_23
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD51F             BPL.N    ??LcdManualMode_0
    876            {
    877              /* Zero the refresh timer so the LCD refreshes right away in manual mode */
    878              Lcd_u32RefreshTimer = 0; 
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable14_9
   \   00000012   0x6008             STR      R0,[R1, #+0]
    879              Lcd_u32Flags |= _LCD_MANUAL_MODE;
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable14_4
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable14_4
   \   00000022   0x6008             STR      R0,[R1, #+0]
    880              while(Lcd_u32Flags & _LCD_MANUAL_MODE)
   \                     ??LcdManualMode_1: (+1)
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable14_4
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x00C0             LSLS     R0,R0,#+3
   \   0000002C   0xD50E             BPL.N    ??LcdManualMode_0
    881              {
    882                /* Run the two SMs that are needed to send LCD bytes */
    883                Lcd_pfnStateMachine();
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable14_11
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x4780             BLX      R0
    884                
    885                /* Provide an equivalent system tick delay */
    886                u32ManualModeTimer = G_u32SystemTime1ms;
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable14_10
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x9000             STR      R0,[SP, #+0]
    887                while( !IsTimeUp(&u32ManualModeTimer, 1) );
   \                     ??LcdManualMode_2: (+1)
   \   0000003E   0x2101             MOVS     R1,#+1
   \   00000040   0x4668             MOV      R0,SP
   \   00000042   0x.... 0x....      BL       IsTimeUp
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD1EC             BNE.N    ??LcdManualMode_1
   \   0000004A   0xE7F8             B.N      ??LcdManualMode_2
    888              }
    889            }
    890            
    891          } /* end LcdManualMode() */
   \                     ??LcdManualMode_0: (+1)
   \   0000004C   0xBD01             POP      {R0,PC}          ;; return
    892          
    893          
    894          /*--------------------------------------------------------------------------------------------------------------------*/
    895          /* Private Functions */
    896          /*--------------------------------------------------------------------------------------------------------------------*/
    897          
    898          
    899          /*----------------------------------------------------------------------------------------------------------------------
    900          Function: LcdSetStartAddressForDataTransfer
    901          
    902          Description:
    903          Queues a message to set the LCD cursor to the correct position in preparation 
    904          for data that will be sent to update the screen.  The starting address is mapped appropriately
    905          for the actual physical LCD screen.
    906          
    907          Requires:
    908           - Lcd_sUpdateArea is up to date for the new LCD data to be written (used for column address).
    909           - u8Page_ is page address for this update
    910          
    911          Promises:
    912           - Command is queued to SSP
    913          */

   \                                 In section .text, align 2, keep-with-next
    914          static bool LcdSetStartAddressForDataTransfer(u8 u8LocalRamPage_)          
    915          {
   \                     LcdSetStartAddressForDataTransfer: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    916            u16 u16ColumnStartLcd = LCD_COLUMNS - (Lcd_sCurrentUpdateArea.u16ColumnStart + Lcd_sCurrentUpdateArea.u16ColumnSize);
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable14_24
   \   00000008   0x8840             LDRH     R0,[R0, #+2]
   \   0000000A   0xF1D0 0x0080      RSBS     R0,R0,#+128
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable14_24
   \   00000012   0x88C9             LDRH     R1,[R1, #+6]
   \   00000014   0x1A45             SUBS     R5,R0,R1
    917            
    918            if( !(Lcd_u32Flags & _LCD_FLAGS_COMMAND_IN_QUEUE) )
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable14_4
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x07C0             LSLS     R0,R0,#+31
   \   0000001E   0xD421             BMI.N    ??LcdSetStartAddressForDataTransfer_0
    919            {
    920              /* Set the message bytes for the current transfer */
    921              Lcd_au8TxBuffer[0] = LCD_SET_PAGE_ADDRESSx    | u8LocalRamPage_;
   \   00000020   0xF054 0x00B0      ORRS     R0,R4,#0xB0
   \   00000024   0x....             LDR.N    R1,??DataTable14_5
   \   00000026   0x7008             STRB     R0,[R1, #+0]
    922              Lcd_au8TxBuffer[1] = LCD_SET_COL_ADDRESS_MSNx | ( (u16ColumnStartLcd >> 4) & 0x0F);
   \   00000028   0xF3C5 0x1003      UBFX     R0,R5,#+4,#+4
   \   0000002C   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000030   0x....             LDR.N    R1,??DataTable14_5
   \   00000032   0x7048             STRB     R0,[R1, #+1]
    923              Lcd_au8TxBuffer[2] = LCD_SET_COL_ADDRESS_LSNx | ( u16ColumnStartLcd & 0x0F);
   \   00000034   0xF015 0x000F      ANDS     R0,R5,#0xF
   \   00000038   0x....             LDR.N    R1,??DataTable14_5
   \   0000003A   0x7088             STRB     R0,[R1, #+2]
    924                
    925              LCD_COMMAND_MODE(); 
   \   0000003C   0xF44F 0x4000      MOV      R0,#+32768
   \   00000040   0x....             LDR.N    R1,??DataTable14_6  ;; 0x400e0e34
   \   00000042   0x6008             STR      R0,[R1, #+0]
    926              Lcd_u32Flags |= _LCD_FLAGS_COMMAND_IN_QUEUE;
   \   00000044   0x....             LDR.N    R0,??DataTable14_4
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000004C   0x....             LDR.N    R1,??DataTable14_4
   \   0000004E   0x6008             STR      R0,[R1, #+0]
    927              Lcd_u32CurrentMsgToken = SspWriteData(Lcd_Ssp, 3, &Lcd_au8TxBuffer[0]);
   \   00000050   0x....             LDR.N    R2,??DataTable14_5
   \   00000052   0x2103             MOVS     R1,#+3
   \   00000054   0x....             LDR.N    R0,??DataTable14_7
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0x.... 0x....      BL       SspWriteData
   \   0000005C   0x....             LDR.N    R1,??DataTable14_8
   \   0000005E   0x6008             STR      R0,[R1, #+0]
    928          
    929              return TRUE;
   \   00000060   0x2001             MOVS     R0,#+1
   \   00000062   0xE000             B.N      ??LcdSetStartAddressForDataTransfer_1
    930            }
    931          
    932            return FALSE;
   \                     ??LcdSetStartAddressForDataTransfer_0: (+1)
   \   00000064   0x2000             MOVS     R0,#+0
   \                     ??LcdSetStartAddressForDataTransfer_1: (+1)
   \   00000066   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    933          
    934          } /* end LcdSetStartAddressForDataTransfer() */
    935          
    936          
    937          /*----------------------------------------------------------------------------------------------------------------------
    938          Function: LcdLoadPageToBuffer
    939          
    940          Description:
    941          Loads Lcd_au8TxBuffer with one page of the current LCD data to refresh the screen.
    942          This function translates the logical addressing of the bits in G_aau8LcdRamImage to the
    943          addressing used by the ST7565 LCD controller.  Column bits must always be loaded
    944          from low address to high address because the LCD controller automatically increments the column
    945          address.
    946          
    947          Algorithm notes:
    948          - Pixel 0,0: row 0, column 0 in LCD RAM becomes row 0, column 127 on the LCD
    949          - Must always update all 8 rows in a page, though any number of columns can be updated 
    950          
    951          Requires:
    952           - u8LocalRamPage_ is the LCD page that is to be updated (provides row address for LCD RAM)
    953           - Lcd_sCurrentUpdateArea has the current area for the update
    954           - G_aau8LcdRamImage has the correct updated data to send
    955           - The 
    956                     
    957          Promises:
    958           - Data from G_aau8LcdRamImage is parsed out by row & column for the current page that requires
    959             updating.  A maximum of 128 bytes are posted to Lcd_au8TxBuffer (updates a full page).
    960             
    961          */

   \                                 In section .text, align 2, keep-with-next
    962          static void LcdLoadPageToBuffer(u8 u8LocalRamPage_) 
    963          {
   \                     LcdLoadPageToBuffer: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
    964            u16 u16LocalRamCurrentRow; 
    965            u8* pu8TxBufferParser;
    966            u8 u8LocalRamBitGroup;
    967            u8 u8CurrentBitInLcdPageMask;
    968            u8 u8CurrentPixelBitInLocalRamMask;
    969            u8 u8CurrentColumnByte;
    970          
    971            pu8TxBufferParser = &Lcd_au8TxBuffer[0];
   \   00000006   0x....             LDR.N    R0,??DataTable14_5
   \   00000008   0x0006             MOVS     R6,R0
    972            
    973            /* Initialize the variables for the first column of pixel data */
    974            u8LocalRamBitGroup = (Lcd_sCurrentUpdateArea.u16ColumnStart + Lcd_sCurrentUpdateArea.u16ColumnSize - 1) / 8; 
   \   0000000A   0x....             LDR.N    R0,??DataTable14_24
   \   0000000C   0x8840             LDRH     R0,[R0, #+2]
   \   0000000E   0x....             LDR.N    R1,??DataTable14_24
   \   00000010   0x88C9             LDRH     R1,[R1, #+6]
   \   00000012   0x1808             ADDS     R0,R1,R0
   \   00000014   0x1E40             SUBS     R0,R0,#+1
   \   00000016   0x2108             MOVS     R1,#+8
   \   00000018   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000001C   0x0007             MOVS     R7,R0
    975            u8CurrentPixelBitInLocalRamMask = 0x01 << ((Lcd_sCurrentUpdateArea.u16ColumnStart + Lcd_sCurrentUpdateArea.u16ColumnSize - 1) % 8);
   \   0000001E   0x....             LDR.N    R0,??DataTable14_24
   \   00000020   0x8840             LDRH     R0,[R0, #+2]
   \   00000022   0x....             LDR.N    R1,??DataTable14_24
   \   00000024   0x88C9             LDRH     R1,[R1, #+6]
   \   00000026   0x1808             ADDS     R0,R1,R0
   \   00000028   0x1E40             SUBS     R0,R0,#+1
   \   0000002A   0x2108             MOVS     R1,#+8
   \   0000002C   0x2201             MOVS     R2,#+1
   \   0000002E   0xFB90 0xF3F1      SDIV     R3,R0,R1
   \   00000032   0xFB01 0x0013      MLS      R0,R1,R3,R0
   \   00000036   0xFA12 0xF000      LSLS     R0,R2,R0
   \   0000003A   0x4681             MOV      R9,R0
    976            u16LocalRamCurrentRow = u8LocalRamPage_ * LCD_PAGE_SIZE; 
   \   0000003C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000040   0x00E0             LSLS     R0,R4,#+3
   \   00000042   0x0005             MOVS     R5,R0
    977            u8CurrentBitInLcdPageMask = 0x01;
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0x4680             MOV      R8,R0
    978            
    979            /* Create the message data 1 LCD page column at a time by forming a byte reading the bits down the 8 rows in the current page. 
    980            Repeat this Lcd_sCurrentUpdateArea.u16ColumnSize times. */
    981            for(u16 i = 0; i < Lcd_sCurrentUpdateArea.u16ColumnSize; i++)
   \   00000048   0x2100             MOVS     R1,#+0
   \                     ??LcdLoadPageToBuffer_0: (+1)
   \   0000004A   0x0008             MOVS     R0,R1
   \   0000004C   0x....             LDR.N    R2,??DataTable14_24
   \   0000004E   0x88D2             LDRH     R2,[R2, #+6]
   \   00000050   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000052   0x4290             CMP      R0,R2
   \   00000054   0xD229             BCS.N    ??LcdLoadPageToBuffer_1
    982            {
    983              u8CurrentColumnByte = 0;
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x4682             MOV      R10,R0
    984            
    985              /* Read 8 bits down the rows of the RAM image at the current bit location */
    986              for(u8 j = 0; j < 8; j++)
   \   0000005A   0x2200             MOVS     R2,#+0
   \                     ??LcdLoadPageToBuffer_2: (+1)
   \   0000005C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000005E   0x2A08             CMP      R2,#+8
   \   00000060   0xDA12             BGE.N    ??LcdLoadPageToBuffer_3
    987              {
    988                /* OR in the bit to the appropriate location in u8CurrentColumnByte */
    989                if( G_aau8LcdRamImage[u16LocalRamCurrentRow + j][u8LocalRamBitGroup] & u8CurrentPixelBitInLocalRamMask )
   \   00000062   0x....             LDR.N    R0,??DataTable14_2
   \   00000064   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000066   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000068   0x1953             ADDS     R3,R2,R5
   \   0000006A   0x011B             LSLS     R3,R3,#+4
   \   0000006C   0x4418             ADD      R0,R0,R3
   \   0000006E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000070   0x5DC0             LDRB     R0,[R0, R7]
   \   00000072   0xEA10 0x0F09      TST      R0,R9
   \   00000076   0xD005             BEQ.N    ??LcdLoadPageToBuffer_4
    990                {
    991                  u8CurrentColumnByte |= ( u8CurrentBitInLcdPageMask << j );
   \   00000078   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000007C   0xFA18 0xF002      LSLS     R0,R8,R2
   \   00000080   0xEA50 0x0A0A      ORRS     R10,R0,R10
    992                }
    993              }
   \                     ??LcdLoadPageToBuffer_4: (+1)
   \   00000084   0x1C52             ADDS     R2,R2,#+1
   \   00000086   0xE7E9             B.N      ??LcdLoadPageToBuffer_2
    994              
    995              /* The byte has been built: add to Lcd_au8TxBuffer */
    996              *pu8TxBufferParser = u8CurrentColumnByte;
   \                     ??LcdLoadPageToBuffer_3: (+1)
   \   00000088   0xF886 0xA000      STRB     R10,[R6, #+0]
    997              pu8TxBufferParser++;
   \   0000008C   0x1C76             ADDS     R6,R6,#+1
    998              
    999              /* Adjust the bitmask and watch for overflow to move to next byte in G_aau8LcdRamImage*/
   1000              u8CurrentPixelBitInLocalRamMask >>= 1;
   \   0000008E   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000092   0xEA5F 0x0959      LSRS     R9,R9,#+1
   1001              if(u8CurrentPixelBitInLocalRamMask == 0x00)
   \   00000096   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000009A   0xF1B9 0x0F00      CMP      R9,#+0
   \   0000009E   0xD102             BNE.N    ??LcdLoadPageToBuffer_5
   1002              {
   1003                u8CurrentPixelBitInLocalRamMask = 0x80;
   \   000000A0   0x2080             MOVS     R0,#+128
   \   000000A2   0x4681             MOV      R9,R0
   1004                u8LocalRamBitGroup--;
   \   000000A4   0x1E7F             SUBS     R7,R7,#+1
   1005              }
   1006            }
   \                     ??LcdLoadPageToBuffer_5: (+1)
   \   000000A6   0x1C49             ADDS     R1,R1,#+1
   \   000000A8   0xE7CF             B.N      ??LcdLoadPageToBuffer_0
   1007            
   1008            /* Lcd_au8TxBuffer now has all of the bytes for the current transfer */
   1009            LCD_DATA_MODE();
   \                     ??LcdLoadPageToBuffer_1: (+1)
   \   000000AA   0xF44F 0x4000      MOV      R0,#+32768
   \   000000AE   0x....             LDR.N    R1,??DataTable14_16  ;; 0x400e0e30
   \   000000B0   0x6008             STR      R0,[R1, #+0]
   1010            Lcd_u32CurrentMsgToken = SspWriteData(Lcd_Ssp, Lcd_sCurrentUpdateArea.u16ColumnSize, &Lcd_au8TxBuffer[0]);
   \   000000B2   0x....             LDR.N    R2,??DataTable14_5
   \   000000B4   0x....             LDR.N    R0,??DataTable14_24
   \   000000B6   0x88C1             LDRH     R1,[R0, #+6]
   \   000000B8   0x....             LDR.N    R0,??DataTable14_7
   \   000000BA   0x6800             LDR      R0,[R0, #+0]
   \   000000BC   0x.... 0x....      BL       SspWriteData
   \   000000C0   0x....             LDR.N    R1,??DataTable14_8
   \   000000C2   0x6008             STR      R0,[R1, #+0]
   1011           
   1012          } /* end LcdLoadPageToBuffer () */
   \   000000C4   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   1013              
   1014          
   1015          /*----------------------------------------------------------------------------------------------------------------------
   1016          Function: LcdUpdateScreenRefreshArea
   1017          
   1018          Description:
   1019          Updates the current area that should be refrehed on the LCD based on any changes to the 
   1020          local LCD RAM.
   1021          
   1022          Requires:
   1023           - sPixelsToUpdate_ points to the data structure that is being adjusted in the LCD RAM
   1024                     
   1025          Promises:
   1026           - Lcd_sUpdateArea is increased in size so that it includes all the pixels of sPixelsToUpdate_;
   1027             If sPixelsToUpdate_ is already fully included in the update area, then no changes are made.
   1028             
   1029          */

   \                                 In section .text, align 2, keep-with-next
   1030          void LcdUpdateScreenRefreshArea(PixelBlockType* sPixelsToUpdate_)
   1031          {
   1032            s16 s16Temp;
   1033            
   1034            /* Determine if this is a new update */
   1035            if(Lcd_sUpdateArea.u16RowSize == 0)
   \                     LcdUpdateScreenRefreshArea: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable14_25
   \   00000002   0x8892             LDRH     R2,[R2, #+4]
   \   00000004   0x2A00             CMP      R2,#+0
   \   00000006   0xD10C             BNE.N    ??LcdUpdateScreenRefreshArea_0
   1036            {
   1037              Lcd_sUpdateArea.u16ColumnStart = sPixelsToUpdate_->u16ColumnStart;
   \   00000008   0x8842             LDRH     R2,[R0, #+2]
   \   0000000A   0x....             LDR.N    R3,??DataTable14_25
   \   0000000C   0x805A             STRH     R2,[R3, #+2]
   1038              Lcd_sUpdateArea.u16RowStart    = sPixelsToUpdate_->u16RowStart;
   \   0000000E   0x8802             LDRH     R2,[R0, #+0]
   \   00000010   0x....             LDR.N    R3,??DataTable14_25
   \   00000012   0x801A             STRH     R2,[R3, #+0]
   1039              Lcd_sUpdateArea.u16ColumnSize  = sPixelsToUpdate_->u16ColumnSize;
   \   00000014   0x88C2             LDRH     R2,[R0, #+6]
   \   00000016   0x....             LDR.N    R3,??DataTable14_25
   \   00000018   0x80DA             STRH     R2,[R3, #+6]
   1040              Lcd_sUpdateArea.u16RowSize     = sPixelsToUpdate_->u16RowSize;
   \   0000001A   0x8882             LDRH     R2,[R0, #+4]
   \   0000001C   0x....             LDR.N    R3,??DataTable14_25
   \   0000001E   0x809A             STRH     R2,[R3, #+4]
   \   00000020   0xE03B             B.N      ??LcdUpdateScreenRefreshArea_1
   1041            }
   1042            /* Otherwise update the current area if necessary */
   1043            else
   1044            {
   1045              /* First check and adjust the starting row and columns if they are beyond the current refresh frame */
   1046              if(Lcd_sUpdateArea.u16ColumnStart > sPixelsToUpdate_->u16ColumnStart)
   \                     ??LcdUpdateScreenRefreshArea_0: (+1)
   \   00000022   0x8842             LDRH     R2,[R0, #+2]
   \   00000024   0x....             LDR.N    R3,??DataTable14_25
   \   00000026   0x885B             LDRH     R3,[R3, #+2]
   \   00000028   0x429A             CMP      R2,R3
   \   0000002A   0xD202             BCS.N    ??LcdUpdateScreenRefreshArea_2
   1047              {
   1048                Lcd_sUpdateArea.u16ColumnStart = sPixelsToUpdate_->u16ColumnStart;
   \   0000002C   0x8842             LDRH     R2,[R0, #+2]
   \   0000002E   0x....             LDR.N    R3,??DataTable14_25
   \   00000030   0x805A             STRH     R2,[R3, #+2]
   1049              }
   1050              
   1051              if(Lcd_sUpdateArea.u16RowStart > sPixelsToUpdate_->u16RowStart)
   \                     ??LcdUpdateScreenRefreshArea_2: (+1)
   \   00000032   0x8802             LDRH     R2,[R0, #+0]
   \   00000034   0x....             LDR.N    R3,??DataTable14_25
   \   00000036   0x881B             LDRH     R3,[R3, #+0]
   \   00000038   0x429A             CMP      R2,R3
   \   0000003A   0xD202             BCS.N    ??LcdUpdateScreenRefreshArea_3
   1052              {
   1053                Lcd_sUpdateArea.u16RowStart = sPixelsToUpdate_->u16RowStart;
   \   0000003C   0x8802             LDRH     R2,[R0, #+0]
   \   0000003E   0x....             LDR.N    R3,??DataTable14_25
   \   00000040   0x801A             STRH     R2,[R3, #+0]
   1054              }
   1055            
   1056              /* Now check and adjust the end row and columns if they are beyond the current refresh frame */
   1057              s16Temp = (sPixelsToUpdate_->u16RowStart + sPixelsToUpdate_->u16RowSize) - (Lcd_sUpdateArea.u16RowStart + Lcd_sUpdateArea.u16RowSize);
   \                     ??LcdUpdateScreenRefreshArea_3: (+1)
   \   00000042   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   00000046   0xF9B0 0x3004      LDRSH    R3,[R0, #+4]
   \   0000004A   0x189A             ADDS     R2,R3,R2
   \   0000004C   0x....             LDR.N    R3,??DataTable14_25
   \   0000004E   0xF9B3 0x3000      LDRSH    R3,[R3, #+0]
   \   00000052   0x1AD2             SUBS     R2,R2,R3
   \   00000054   0x....             LDR.N    R3,??DataTable14_25
   \   00000056   0xF9B3 0x3004      LDRSH    R3,[R3, #+4]
   \   0000005A   0x1AD2             SUBS     R2,R2,R3
   \   0000005C   0x0011             MOVS     R1,R2
   1058              if( s16Temp > 0 )
   \   0000005E   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000060   0x2901             CMP      R1,#+1
   \   00000062   0xDB04             BLT.N    ??LcdUpdateScreenRefreshArea_4
   1059              {
   1060                Lcd_sUpdateArea.u16RowSize += s16Temp;
   \   00000064   0x....             LDR.N    R2,??DataTable14_25
   \   00000066   0x8892             LDRH     R2,[R2, #+4]
   \   00000068   0x188A             ADDS     R2,R1,R2
   \   0000006A   0x....             LDR.N    R3,??DataTable14_25
   \   0000006C   0x809A             STRH     R2,[R3, #+4]
   1061              }
   1062            
   1063              s16Temp = (sPixelsToUpdate_->u16ColumnStart + sPixelsToUpdate_->u16ColumnSize) - (Lcd_sUpdateArea.u16ColumnStart + Lcd_sUpdateArea.u16ColumnSize);
   \                     ??LcdUpdateScreenRefreshArea_4: (+1)
   \   0000006E   0xF9B0 0x2002      LDRSH    R2,[R0, #+2]
   \   00000072   0xF9B0 0x3006      LDRSH    R3,[R0, #+6]
   \   00000076   0x189A             ADDS     R2,R3,R2
   \   00000078   0x....             LDR.N    R3,??DataTable14_25
   \   0000007A   0xF9B3 0x3002      LDRSH    R3,[R3, #+2]
   \   0000007E   0x1AD2             SUBS     R2,R2,R3
   \   00000080   0x....             LDR.N    R3,??DataTable14_25
   \   00000082   0xF9B3 0x3006      LDRSH    R3,[R3, #+6]
   \   00000086   0x1AD2             SUBS     R2,R2,R3
   \   00000088   0x0011             MOVS     R1,R2
   1064              if( s16Temp > 0 )
   \   0000008A   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   0000008C   0x2901             CMP      R1,#+1
   \   0000008E   0xDB04             BLT.N    ??LcdUpdateScreenRefreshArea_1
   1065              {
   1066                Lcd_sUpdateArea.u16ColumnSize += s16Temp;
   \   00000090   0x....             LDR.N    R2,??DataTable14_25
   \   00000092   0x88D2             LDRH     R2,[R2, #+6]
   \   00000094   0x188A             ADDS     R2,R1,R2
   \   00000096   0x....             LDR.N    R3,??DataTable14_25
   \   00000098   0x80DA             STRH     R2,[R3, #+6]
   1067              }
   1068            }    
   1069            
   1070          } /* end LcdUpdateScreenRefreshArea() */      
   \                     ??LcdUpdateScreenRefreshArea_1: (+1)
   \   0000009A   0x4770             BX       LR               ;; return
   1071          
   1072          
   1073          /***********************************************************************************************************************
   1074          State Machine Function Definitions
   1075          
   1076          The LCD state machine monitors the LCD variables to determine if a refresh is required.
   1077          If so, it updates the LCD with the current RAM contents.
   1078          ***********************************************************************************************************************/
   1079          
   1080          /*----------------------------------------------------------------------------------------------------------------------
   1081          State: LcdSM_Idle()
   1082          */
   1083          

   \                                 In section .text, align 4, keep-with-next
   1084          static void LcdSM_Idle(void)
   1085          {
   \                     LcdSM_Idle: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1086            /* Check if a command is queued: commands are always sent immediately */
   1087            if(Lcd_u32Flags & _LCD_FLAGS_COMMAND_IN_QUEUE)
   \   00000002   0x....             LDR.N    R0,??DataTable14_4
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x07C0             LSLS     R0,R0,#+31
   \   00000008   0xD50B             BPL.N    ??LcdSM_Idle_0
   1088            {
   1089              Lcd_u32Timer = G_u32SystemTime1ms;
   \   0000000A   0x....             LDR.N    R0,??DataTable14_10
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x....             LDR.N    R1,??DataTable14_17
   \   00000010   0x6008             STR      R0,[R1, #+0]
   1090              Lcd_ReturnState = LcdSM_Idle;
   \   00000012   0x....             LDR.N    R0,??DataTable14_26
   \   00000014   0x....             LDR.N    R1,??DataTable14_27
   \   00000016   0x6008             STR      R0,[R1, #+0]
   1091              Lcd_pfnStateMachine = LcdSM_WaitTransfer;
   \   00000018   0x.... 0x....      ADR.W    R0,LcdSM_WaitTransfer
   \   0000001C   0x....             LDR.N    R1,??DataTable14_11
   \   0000001E   0x6008             STR      R0,[R1, #+0]
   \   00000020   0xE051             B.N      ??LcdSM_Idle_1
   1092            }
   1093            
   1094            /* Monitor the refresh period */
   1095            else if( IsTimeUp(&Lcd_u32RefreshTimer, LCD_REFRESH_TIME) )
   \                     ??LcdSM_Idle_0: (+1)
   \   00000022   0x2119             MOVS     R1,#+25
   \   00000024   0x....             LDR.N    R0,??DataTable14_9
   \   00000026   0x.... 0x....      BL       IsTimeUp
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD045             BEQ.N    ??LcdSM_Idle_2
   1096            {
   1097              /* Reset the refresh period reference value */
   1098              Lcd_u32RefreshTimer = G_u32SystemTime1ms;
   \   0000002E   0x....             LDR.N    R0,??DataTable14_10
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x....             LDR.N    R1,??DataTable14_9
   \   00000034   0x6008             STR      R0,[R1, #+0]
   1099              
   1100              /* Do something only if there is something to do (i.e. at least one row of the LCD needs updating) */
   1101              if(Lcd_sUpdateArea.u16RowSize != 0)
   \   00000036   0x....             LDR.N    R0,??DataTable14_25
   \   00000038   0x8880             LDRH     R0,[R0, #+4]
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD043             BEQ.N    ??LcdSM_Idle_1
   1102              {
   1103                /* Make a copy of the current Lcd_sUpdateArea then clear it */
   1104                Lcd_sCurrentUpdateArea.u16RowSize     = Lcd_sUpdateArea.u16RowSize;
   \   0000003E   0x....             LDR.N    R0,??DataTable14_25
   \   00000040   0x8880             LDRH     R0,[R0, #+4]
   \   00000042   0x....             LDR.N    R1,??DataTable14_24
   \   00000044   0x8088             STRH     R0,[R1, #+4]
   1105                Lcd_sCurrentUpdateArea.u16ColumnSize  = Lcd_sUpdateArea.u16ColumnSize;
   \   00000046   0x....             LDR.N    R0,??DataTable14_25
   \   00000048   0x88C0             LDRH     R0,[R0, #+6]
   \   0000004A   0x....             LDR.N    R1,??DataTable14_24
   \   0000004C   0x80C8             STRH     R0,[R1, #+6]
   1106                Lcd_sCurrentUpdateArea.u16RowStart    = Lcd_sUpdateArea.u16RowStart;
   \   0000004E   0x....             LDR.N    R0,??DataTable14_25
   \   00000050   0x8800             LDRH     R0,[R0, #+0]
   \   00000052   0x....             LDR.N    R1,??DataTable14_24
   \   00000054   0x8008             STRH     R0,[R1, #+0]
   1107                Lcd_sCurrentUpdateArea.u16ColumnStart = Lcd_sUpdateArea.u16ColumnStart;     
   \   00000056   0x....             LDR.N    R0,??DataTable14_25
   \   00000058   0x8840             LDRH     R0,[R0, #+2]
   \   0000005A   0x....             LDR.N    R1,??DataTable14_24
   \   0000005C   0x8048             STRH     R0,[R1, #+2]
   1108          
   1109                Lcd_sUpdateArea.u16RowSize     = 0;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x....             LDR.N    R1,??DataTable14_25
   \   00000062   0x8088             STRH     R0,[R1, #+4]
   1110                Lcd_sUpdateArea.u16ColumnSize  = 0;
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x....             LDR.N    R1,??DataTable14_25
   \   00000068   0x80C8             STRH     R0,[R1, #+6]
   1111                Lcd_sUpdateArea.u16RowStart    = 0;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x....             LDR.N    R1,??DataTable14_25
   \   0000006E   0x8008             STRH     R0,[R1, #+0]
   1112                Lcd_sUpdateArea.u16ColumnStart = 0;     
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0x....             LDR.N    R1,??DataTable14_25
   \   00000074   0x8048             STRH     R0,[R1, #+2]
   1113          
   1114                /* Calculate the number of pages to update -- all rows in a page must be updated to the LCD if any
   1115                pixels are present on the page.  Eg. if 10 rows need updating, then up to 3 pages will have to be updated
   1116                since there could be one pixel row on page n, eight on page n+1 and one on page n+2.  */
   1117                Lcd_u8PagesToUpdate = ( (Lcd_sCurrentUpdateArea.u16RowStart + Lcd_sCurrentUpdateArea.u16RowSize - 1) / LCD_PAGE_SIZE ) - 
   1118                                      ( (Lcd_sCurrentUpdateArea.u16RowStart) / LCD_PAGE_SIZE ) + 1;
   \   00000076   0x....             LDR.N    R0,??DataTable14_24
   \   00000078   0x8800             LDRH     R0,[R0, #+0]
   \   0000007A   0x....             LDR.N    R1,??DataTable14_24
   \   0000007C   0x8889             LDRH     R1,[R1, #+4]
   \   0000007E   0x1808             ADDS     R0,R1,R0
   \   00000080   0x1E40             SUBS     R0,R0,#+1
   \   00000082   0x2108             MOVS     R1,#+8
   \   00000084   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000088   0x....             LDR.N    R1,??DataTable14_24
   \   0000008A   0x8809             LDRH     R1,[R1, #+0]
   \   0000008C   0x2208             MOVS     R2,#+8
   \   0000008E   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00000092   0x1A40             SUBS     R0,R0,R1
   \   00000094   0x1C40             ADDS     R0,R0,#+1
   \   00000096   0x....             LDR.N    R1,??DataTable14_28
   \   00000098   0x7008             STRB     R0,[R1, #+0]
   1119                
   1120                /* Set the starting page; subsequent pages are incremental */
   1121                Lcd_u8CurrentPage = Lcd_sCurrentUpdateArea.u16RowStart / LCD_PAGE_SIZE;
   \   0000009A   0x....             LDR.N    R0,??DataTable14_24
   \   0000009C   0x8800             LDRH     R0,[R0, #+0]
   \   0000009E   0x2108             MOVS     R1,#+8
   \   000000A0   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000000A4   0x....             LDR.N    R1,??DataTable14_29
   \   000000A6   0x7008             STRB     R0,[R1, #+0]
   1122          
   1123                /* Start the refresh cycle by loading the command to set the cursor location */
   1124                LcdSetStartAddressForDataTransfer(Lcd_u8CurrentPage);
   \   000000A8   0x....             LDR.N    R0,??DataTable14_29
   \   000000AA   0x7800             LDRB     R0,[R0, #+0]
   \   000000AC   0x.... 0x....      BL       LcdSetStartAddressForDataTransfer
   1125                Lcd_pfnStateMachine = LcdSM_WaitTransfer;
   \   000000B0   0x.... 0x....      ADR.W    R0,LcdSM_WaitTransfer
   \   000000B4   0x....             LDR.N    R1,??DataTable14_11
   \   000000B6   0x6008             STR      R0,[R1, #+0]
   \   000000B8   0xE005             B.N      ??LcdSM_Idle_1
   1126              }
   1127            }
   1128            else
   1129            {
   1130              /* Nothing to do, so just make sure manual mode is not enabled */
   1131              Lcd_u32Flags &= ~_LCD_MANUAL_MODE;
   \                     ??LcdSM_Idle_2: (+1)
   \   000000BA   0x....             LDR.N    R0,??DataTable14_4
   \   000000BC   0x6800             LDR      R0,[R0, #+0]
   \   000000BE   0xF030 0x5080      BICS     R0,R0,#0x10000000
   \   000000C2   0x....             LDR.N    R1,??DataTable14_4
   \   000000C4   0x6008             STR      R0,[R1, #+0]
   1132            }
   1133                  
   1134          } /* end LcdSM_Idle */
   \                     ??LcdSM_Idle_1: (+1)
   \   000000C6   0xBD01             POP      {R0,PC}          ;; return
   1135          
   1136          
   1137          /*----------------------------------------------------------------------------------------------------------------------
   1138          State: LcdSM_WaitTransfer()
   1139          Sends the current queued LCD command or data to the SPI peripheral through the SSP API.
   1140          This waits until the message token is complete or a timeout occurs.  We can determine the next step based
   1141          on Lcd_u8PagesToUpdate that will be 0 if the last transfer was a comand or non-zero if we are waiting
   1142          on the screen refresh process.
   1143          */

   \                                 In section .text, align 4, keep-with-next
   1144          static void LcdSM_WaitTransfer(void)
   1145          {
   \                     LcdSM_WaitTransfer: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1146            /* Wait for message to be sent */
   1147            if(QueryMessageStatus(Lcd_u32CurrentMsgToken) == COMPLETE)
   \   00000002   0x....             LDR.N    R0,??DataTable14_8
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x.... 0x....      BL       QueryMessageStatus
   \   0000000A   0x2804             CMP      R0,#+4
   \   0000000C   0xD131             BNE.N    ??LcdSM_WaitTransfer_0
   1148            {
   1149              /* The next step depends on what we did last */
   1150              if(Lcd_u8PagesToUpdate != 0)
   \   0000000E   0x....             LDR.N    R0,??DataTable14_28
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD020             BEQ.N    ??LcdSM_WaitTransfer_1
   1151              {
   1152                /* If the last transmission was a command, that means it's time to load an LCD page */
   1153                if(Lcd_u32Flags & _LCD_FLAGS_COMMAND_IN_QUEUE)
   \   00000016   0x....             LDR.N    R0,??DataTable14_4
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x07C0             LSLS     R0,R0,#+31
   \   0000001C   0xD514             BPL.N    ??LcdSM_WaitTransfer_2
   1154                {
   1155                  Lcd_u32Flags &= ~_LCD_FLAGS_COMMAND_IN_QUEUE;
   \   0000001E   0x....             LDR.N    R0,??DataTable14_4
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x0840             LSRS     R0,R0,#+1
   \   00000024   0x0040             LSLS     R0,R0,#+1
   \   00000026   0x....             LDR.N    R1,??DataTable14_4
   \   00000028   0x6008             STR      R0,[R1, #+0]
   1156                  
   1157                  LcdLoadPageToBuffer(Lcd_u8CurrentPage);
   \   0000002A   0x....             LDR.N    R0,??DataTable14_29
   \   0000002C   0x7800             LDRB     R0,[R0, #+0]
   \   0000002E   0x.... 0x....      BL       LcdLoadPageToBuffer
   1158                  Lcd_u8CurrentPage++;
   \   00000032   0x....             LDR.N    R0,??DataTable14_29
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0x1C40             ADDS     R0,R0,#+1
   \   00000038   0x....             LDR.N    R1,??DataTable14_29
   \   0000003A   0x7008             STRB     R0,[R1, #+0]
   1159                  Lcd_u8PagesToUpdate--;
   \   0000003C   0x....             LDR.N    R0,??DataTable14_28
   \   0000003E   0x7800             LDRB     R0,[R0, #+0]
   \   00000040   0x1E40             SUBS     R0,R0,#+1
   \   00000042   0x....             LDR.N    R1,??DataTable14_28
   \   00000044   0x7008             STRB     R0,[R1, #+0]
   \   00000046   0xE003             B.N      ??LcdSM_WaitTransfer_3
   1160                }
   1161                else
   1162                {
   1163                  LcdSetStartAddressForDataTransfer(Lcd_u8CurrentPage);
   \                     ??LcdSM_WaitTransfer_2: (+1)
   \   00000048   0x....             LDR.N    R0,??DataTable14_29
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0x.... 0x....      BL       LcdSetStartAddressForDataTransfer
   1164                }
   1165                
   1166                Lcd_ReturnState = LcdSM_WaitTransfer;
   \                     ??LcdSM_WaitTransfer_3: (+1)
   \   00000050   0x....             LDR.N    R0,??DataTable14_30
   \   00000052   0x....             LDR.N    R1,??DataTable14_27
   \   00000054   0x6008             STR      R0,[R1, #+0]
   \   00000056   0xE008             B.N      ??LcdSM_WaitTransfer_4
   1167              }
   1168              /* Either just sent a command, or just sent that last data page */
   1169              else
   1170              {
   1171                Lcd_u32Flags &= ~(_LCD_MANUAL_MODE | _LCD_FLAGS_COMMAND_IN_QUEUE);
   \                     ??LcdSM_WaitTransfer_1: (+1)
   \   00000058   0x....             LDR.N    R0,??DataTable14_4
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x....             LDR.N    R1,??DataTable14_31  ;; 0xeffffffe
   \   0000005E   0x4008             ANDS     R0,R1,R0
   \   00000060   0x....             LDR.N    R1,??DataTable14_4
   \   00000062   0x6008             STR      R0,[R1, #+0]
   1172                Lcd_ReturnState = LcdSM_Idle;
   \   00000064   0x....             LDR.N    R0,??DataTable14_26
   \   00000066   0x....             LDR.N    R1,??DataTable14_27
   \   00000068   0x6008             STR      R0,[R1, #+0]
   1173              }
   1174          
   1175              Lcd_pfnStateMachine = Lcd_ReturnState;
   \                     ??LcdSM_WaitTransfer_4: (+1)
   \   0000006A   0x....             LDR.N    R0,??DataTable14_27
   \   0000006C   0x6800             LDR      R0,[R0, #+0]
   \   0000006E   0x....             LDR.N    R1,??DataTable14_11
   \   00000070   0x6008             STR      R0,[R1, #+0]
   1176            }
   1177            
   1178            /* Check for timeout */
   1179            
   1180          } /* end LcdSM_WaitTransfer() */
   \                     ??LcdSM_WaitTransfer_0: (+1)
   \   00000072   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x........         DC32     G_aau8SmallFonts

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x........         DC32     G_aau8BigFonts

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   0x........         DC32     G_aau8LcdRamImage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_3:
   \   00000000   0x........         DC32     G_sLcdClearWholeScreen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_4:
   \   00000000   0x........         DC32     Lcd_u32Flags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_5:
   \   00000000   0x........         DC32     Lcd_au8TxBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_6:
   \   00000000   0x400E0E34         DC32     0x400e0e34

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_7:
   \   00000000   0x........         DC32     Lcd_Ssp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_8:
   \   00000000   0x........         DC32     Lcd_u32CurrentMsgToken

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_9:
   \   00000000   0x........         DC32     Lcd_u32RefreshTimer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_10:
   \   00000000   0x........         DC32     G_u32SystemTime1ms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_11:
   \   00000000   0x........         DC32     Lcd_pfnStateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_12:
   \   00000000   0x........         DC32     Lcd_au8RxDummyBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_13:
   \   00000000   0x........         DC32     Lcd_pu8RxDummyBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_14:
   \   00000000   0x........         DC32     Lcd_sSspConfig

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_15:
   \   00000000   0x400E0E00         DC32     0x400e0e00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_16:
   \   00000000   0x400E0E30         DC32     0x400e0e30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_17:
   \   00000000   0x........         DC32     Lcd_u32Timer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_18:
   \   00000000   0x........         DC32     Lcd_au8SetupArray

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_19:
   \   00000000   0x........         DC32     aau8EngenuicsLogoBlack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_20:
   \   00000000   0x........         DC32     Lcd_au8MessageWelcome

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_21:
   \   00000000   0x........         DC32     G_u32ApplicationFlags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_22:
   \   00000000   0x........         DC32     Lcd_au8MessageInit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_23:
   \   00000000   0x........         DC32     G_u32SystemFlags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_24:
   \   00000000   0x........         DC32     Lcd_sCurrentUpdateArea

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_25:
   \   00000000   0x........         DC32     Lcd_sUpdateArea

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_26:
   \   00000000   0x........         DC32     LcdSM_Idle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_27:
   \   00000000   0x........         DC32     Lcd_ReturnState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_28:
   \   00000000   0x........         DC32     Lcd_u8PagesToUpdate

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_29:
   \   00000000   0x........         DC32     Lcd_u8CurrentPage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_30:
   \   00000000   0x........         DC32     LcdSM_WaitTransfer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_31:
   \   00000000   0xEFFFFFFE         DC32     0xeffffffe
   1181          
   1182          
   1183          /*--------------------------------------------------------------------------------------------------------------------*/
   1184          /* End of File */
   1185          /*--------------------------------------------------------------------------------------------------------------------*/
   1186          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   LcdClearPixel
      24   LcdClearPixels
        24   -> LcdUpdateScreenRefreshArea
       8   LcdClearScreen
         8   -> LcdUpdateScreenRefreshArea
       8   LcdCommand
         8   -> LcdManualMode
         8   -> SspWriteData
      24   LcdInitialize
        24   -> DebugPrintf
        24   -> IsTimeUp
        24   -> LcdClearPixels
        24   -> LcdCommand
        24   -> LcdLoadBitmap
        24   -> LcdLoadString
        24   -> LcdManualMode
        24   -> LedOn
        24   -> SspRequest
        24   -> strlen
      40   LcdLoadBitmap
        40   -> LcdUpdateScreenRefreshArea
      32   LcdLoadPageToBuffer
        32   -> SspWriteData
      32   LcdLoadString
        32   -> LcdLoadBitmap
       8   LcdManualMode
         8   -- Indirect call
         8   -> IsTimeUp
       8   LcdRunActiveState
         8   -- Indirect call
       8   LcdSM_Idle
         8   -> IsTimeUp
         8   -> LcdSetStartAddressForDataTransfer
       8   LcdSM_WaitTransfer
         8   -> LcdLoadPageToBuffer
         8   -> LcdSetStartAddressForDataTransfer
         8   -> QueryMessageStatus
       8   LcdSetPixel
      16   LcdSetStartAddressForDataTransfer
        16   -> SspWriteData
       0   LcdShift
       0   LcdUpdateScreenRefreshArea


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_10
       4  ??DataTable14_11
       4  ??DataTable14_12
       4  ??DataTable14_13
       4  ??DataTable14_14
       4  ??DataTable14_15
       4  ??DataTable14_16
       4  ??DataTable14_17
       4  ??DataTable14_18
       4  ??DataTable14_19
       4  ??DataTable14_2
       4  ??DataTable14_20
       4  ??DataTable14_21
       4  ??DataTable14_22
       4  ??DataTable14_23
       4  ??DataTable14_24
       4  ??DataTable14_25
       4  ??DataTable14_26
       4  ??DataTable14_27
       4  ??DataTable14_28
       4  ??DataTable14_29
       4  ??DataTable14_3
       4  ??DataTable14_30
       4  ??DataTable14_31
       4  ??DataTable14_4
       4  ??DataTable14_5
       4  ??DataTable14_6
       4  ??DataTable14_7
       4  ??DataTable14_8
       4  ??DataTable14_9
    1024  G_aau8LcdRamImage
       8  G_sLcdClearLine0
       8  G_sLcdClearLine1
       8  G_sLcdClearLine2
       8  G_sLcdClearLine3
       8  G_sLcdClearLine4
       8  G_sLcdClearLine5
       8  G_sLcdClearLine6
       8  G_sLcdClearLine7
       8  G_sLcdClearWholeScreen
      62  LcdClearPixel
     176  LcdClearPixels
      52  LcdClearScreen
      88  LcdCommand
     446  LcdInitialize
     376  LcdLoadBitmap
     200  LcdLoadPageToBuffer
     144  LcdLoadString
      78  LcdManualMode
      12  LcdRunActiveState
     200  LcdSM_Idle
     116  LcdSM_WaitTransfer
      62  LcdSetPixel
     104  LcdSetStartAddressForDataTransfer
       2  LcdShift
     156  LcdUpdateScreenRefreshArea
       4  Lcd_ReturnState
       4  Lcd_Ssp
      12  Lcd_au8MessageInit
      20  Lcd_au8MessageWelcome
       1  Lcd_au8RxDummyBuffer
      12  Lcd_au8SetupArray
     128  Lcd_au8TxBuffer
       4  Lcd_pfnStateMachine
       4  Lcd_pu8RxDummyBuffer
       8  Lcd_sCurrentUpdateArea
      36  Lcd_sSspConfig
       8  Lcd_sUpdateArea
       4  Lcd_u32CurrentMsgToken
       4  Lcd_u32Flags
       4  Lcd_u32RefreshTimer
       4  Lcd_u32Timer
       1  Lcd_u8CurrentPage
       1  Lcd_u8PagesToUpdate

 
 1 239 bytes in section .bss
   116 bytes in section .data
 2 402 bytes in section .text
 
 2 402 bytes of CODE memory
 1 355 bytes of DATA memory

Errors: none
Warnings: none
