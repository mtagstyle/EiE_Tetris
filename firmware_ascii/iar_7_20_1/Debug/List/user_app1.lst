###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       26/Jun/2018  22:50:21
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_common\application\user_app1.c
#    Command line =  
#        "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_common\application\user_app1.c"
#        -D EIE1 --preprocess=cl "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_ascii\iar_7_20_1\Debug\List"
#        -lC "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_ascii\iar_7_20_1\Debug\List" -o
#        "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_ascii\iar_7_20_1\Debug\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "E:\Software\IAR
#        Systems\Embedded Workbench 7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_ascii\iar_7_20_1\" -I
#        "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_ascii\iar_7_20_1\..\bsp\" -I
#        "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_ascii\iar_7_20_1\..\drivers\"
#        -I "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_ascii\iar_7_20_1\..\application\"
#        -I "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_ascii\iar_7_20_1\..\..\firmware_common\"
#        -I "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_ascii\iar_7_20_1\..\..\firmware_common\application\"
#        -I "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_ascii\iar_7_20_1\..\..\firmware_common\cmsis\"
#        -I "C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_ascii\iar_7_20_1\..\..\firmware_common\drivers\"
#        -On --use_c++_inline --require_prototypes -I "E:\Software\IAR
#        Systems\Embedded Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_Canada.1252
#    List file    =  
#        C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_ascii\iar_7_20_1\Debug\List\user_app1.lst
#    Object file  =  
#        C:\Users\Anthony\Google
#        Drive\Hobbies\IAR\Razor_Atmel\firmware_ascii\iar_7_20_1\Debug\Obj\user_app1.o
#
###############################################################################

C:\Users\Anthony\Google Drive\Hobbies\IAR\Razor_Atmel\firmware_common\application\user_app1.c
      1          /**********************************************************************************************************************
      2          File: user_app1.c                                                                
      3          
      4          ----------------------------------------------------------------------------------------------------------------------
      5          To start a new task using this user_app1 as a template:
      6           1. Copy both user_app1.c and user_app1.h to the Application directory
      7           2. Rename the files yournewtaskname.c and yournewtaskname.h
      8           3. Add yournewtaskname.c and yournewtaskname.h to the Application Include and Source groups in the IAR project
      9           4. Use ctrl-h (make sure "Match Case" is checked) to find and replace all instances of "user_app1" with "yournewtaskname"
     10           5. Use ctrl-h to find and replace all instances of "UserApp1" with "YourNewTaskName"
     11           6. Use ctrl-h to find and replace all instances of "USER_APP1" with "YOUR_NEW_TASK_NAME"
     12           7. Add a call to YourNewTaskNameInitialize() in the init section of main
     13           8. Add a call to YourNewTaskNameRunActiveState() in the Super Loop section of main
     14           9. Update yournewtaskname.h per the instructions at the top of yournewtaskname.h
     15          10. Delete this text (between the dashed lines) and update the Description below to describe your task
     16          ----------------------------------------------------------------------------------------------------------------------
     17          
     18          Description:
     19          This is a user_app1.c file template 
     20          
     21          ------------------------------------------------------------------------------------------------------------------------
     22          API:
     23          
     24          Public functions:
     25          
     26          
     27          Protected System functions:
     28          void UserApp1Initialize(void)
     29          Runs required initialzation for the task.  Should only be called once in main init section.
     30          
     31          void UserApp1RunActiveState(void)
     32          Runs current task state.  Should only be called once in main loop.
     33          
     34          
     35          **********************************************************************************************************************/
     36          
     37          #include "configuration.h"
     38          #include <string.h>
     39          
     40          /***********************************************************************************************************************
     41          Global variable definitions with scope across entire project.
     42          All Global variable names shall start with "G_UserApp1"
     43          ***********************************************************************************************************************/
     44          /* New variables */

   \                                 In section .bss, align 4
     45          volatile u32 G_u32UserApp1Flags;                       /* Global state flags */
   \                     G_u32UserApp1Flags:
   \   00000000                      DS8 4
     46          
     47          
     48          /*--------------------------------------------------------------------------------------------------------------------*/
     49          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     50          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     51          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     52          
     53          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     54          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     55          
     56          
     57          /***********************************************************************************************************************
     58          Global variable definitions with scope limited to this local application.
     59          Variable names shall start with "UserApp1_" and be declared as static.
     60          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     61          static fnCode_type UserApp1_StateMachine;            /* The state machine function pointer */
                                    ^
Warning[Pe550]: variable "UserApp1_StateMachine" was set but never used
   \                     UserApp1_StateMachine:
   \   00000000                      DS8 4
     62          //static u32 UserApp1_u32Timeout;                      /* Timeout counter used across states */

   \                                 In section .bss, align 2
     63          static u16 msCounter = 0;
   \                     msCounter:
   \   00000000                      DS8 2
     64          
     65          /**********************************************************************************************************************
     66          Function Definitions
     67          **********************************************************************************************************************/
     68          
     69          /*--------------------------------------------------------------------------------------------------------------------*/
     70          /* Public functions                                                                                                   */
     71          /*--------------------------------------------------------------------------------------------------------------------*/
     72          
     73          /*--------------------------------------------------------------------------------------------------------------------*/
     74          /* Protected functions                                                                                                */
     75          /*--------------------------------------------------------------------------------------------------------------------*/
     76          
     77          /*--------------------------------------------------------------------------------------------------------------------
     78          Function: UserApp1Initialize
     79          
     80          Description:
     81          Initializes the State Machine and its variables.
     82          
     83          Requires:
     84            -
     85          
     86          Promises:
     87            - 
     88          */

   \                                 In section .text, align 2, keep-with-next
     89          void UserApp1Initialize(void)
     90          {
   \                     UserApp1Initialize: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
     91           
     92            //LcdClearScreen();
     93            /* If good initialization, set state to Idle */
     94            if( 1 )
     95            {
     96              UserApp1_StateMachine = UserApp1SM_Idle;
   \   00000002   0x.... 0x....      ADR.W    R0,UserApp1SM_Idle
   \   00000006   0x....             LDR.N    R1,??DataTable1
   \   00000008   0x6008             STR      R0,[R1, #+0]
     97              int i, j;
     98              memcpy(&i, &j, 0);
   \   0000000A   0x2400             MOVS     R4,#+0
   \   0000000C   0x466D             MOV      R5,SP
   \   0000000E   0xAE01             ADD      R6,SP,#+4
   \   00000010   0x0022             MOVS     R2,R4
   \   00000012   0x0029             MOVS     R1,R5
   \   00000014   0x0030             MOVS     R0,R6
   \   00000016   0x.... 0x....      BL       __aeabi_memcpy
     99            }
    100            else
    101            {
    102              /* The task isn't properly initialized, so shut it down and don't run */
    103              UserApp1_StateMachine = UserApp1SM_Error;
    104            }
    105          
    106          } /* end UserApp1Initialize() */
   \   0000001A   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    107          
    108            
    109          /*----------------------------------------------------------------------------------------------------------------------
    110          Function UserApp1RunActiveState()
    111          
    112          Description:
    113          Selects and runs one iteration of the current state in the state machine.
    114          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    115          may take 1ms / n to execute.
    116          
    117          Requires:
    118            - State machine function pointer points at current state
    119          
    120          Promises:
    121            - Calls the function to pointed by the state machine function pointer
    122          */

   \                                 In section .text, align 2, keep-with-next
    123          void UserApp1RunActiveState(void)
    124          {
    125          
    126            msCounter++;
   \                     UserApp1RunActiveState: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable1_1
   \   00000002   0x8800             LDRH     R0,[R0, #+0]
   \   00000004   0x1C40             ADDS     R0,R0,#+1
   \   00000006   0x....             LDR.N    R1,??DataTable1_1
   \   00000008   0x8008             STRH     R0,[R1, #+0]
    127            /*
    128            //UserApp1_StateMachine();
    129            msCounter++;
    130            char intString[10];
    131            
    132            int i, temp;
    133            temp = msCounter;
    134            intString[9] = '\0';
    135            for(i = 8; i>=0; i--)
    136            {
    137              intString[i] = (char)(temp%10)+0x30;
    138              temp/=10;
    139            }
    140            
    141            PixelAddressType type;
    142            type.u16PixelColumnAddress = 0;
    143            type.u16PixelRowAddress = 0;
    144          
    145            LcdLoadString(intString, LCD_FONT_SMALL, &type);
    146            */
    147            
    148          /*
    149            extern u8 aau8IdleRight[12][12];
    150            extern u8 aau8RunningRight1[12][12];
    151            extern u8 aau8RunningRight2[12][12];
    152            extern u8 aau8RunningRight3[12][12];
    153            extern u8 aau8JumpRight[12][12];
    154            
    155            extern u8 aau8IdleLeft[12][12];
    156            extern u8 aau8RunningLeft1[12][12];
    157            extern u8 aau8RunningLeft2[12][12];
    158            extern u8 aau8RunningLeft3[12][12];
    159            extern u8 aau8JumpLeft[12][12];
    160            
    161            PixelBlockType mario;
    162            mario.u16RowSize = 12;
    163            mario.u16ColumnSize = 12;
    164            mario.u16ColumnStart = 0;
    165            mario.u16RowStart = 0;
    166            
    167            if(msCounter == 333)
    168              LcdLoadBitmap(&aau8RunningRight3[0][0], &mario);
    169            else if(msCounter == 666)
    170              LcdLoadBitmap(&aau8RunningRight2[0][0], &mario);
    171            else if(msCounter == 999)
    172              LcdLoadBitmap(&aau8RunningRight1[0][0], &mario);
    173          
    174            if(msCounter > 1000)
    175              msCounter = 0;
    176          */
    177          
    178          } /* end UserApp1RunActiveState */
   \   0000000A   0x4770             BX       LR               ;; return
    179          
    180          
    181          /*--------------------------------------------------------------------------------------------------------------------*/
    182          /* Private functions                                                                                                  */
    183          /*--------------------------------------------------------------------------------------------------------------------*/
    184          
    185          
    186          /**********************************************************************************************************************
    187          State Machine Function Definitions
    188          **********************************************************************************************************************/
    189          
    190          /*-------------------------------------------------------------------------------------------------------------------*/
    191          /* Wait for ??? */

   \                                 In section .text, align 4, keep-with-next
    192          static void UserApp1SM_Idle(void)
    193          {
    194          
    195          } /* end UserApp1SM_Idle() */
   \                     UserApp1SM_Idle: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     UserApp1_StateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     msCounter
    196              
    197          
    198          /*-------------------------------------------------------------------------------------------------------------------*/
    199          /* Handle an error */
    200          static void UserApp1SM_Error(void)          
    201          {
    202            
    203          } /* end UserApp1SM_Error() */
    204          
    205          
    206          
    207          /*--------------------------------------------------------------------------------------------------------------------*/
    208          /* End of File                                                                                                        */
    209          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   UserApp1Initialize
        24   -> __aeabi_memcpy
       0   UserApp1RunActiveState
       0   UserApp1SM_Idle


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  G_u32UserApp1Flags
      28  UserApp1Initialize
      12  UserApp1RunActiveState
       2  UserApp1SM_Idle
       4  UserApp1_StateMachine
       2  msCounter

 
 10 bytes in section .bss
 50 bytes in section .text
 
 50 bytes of CODE memory
 10 bytes of DATA memory

Errors: none
Warnings: 1
